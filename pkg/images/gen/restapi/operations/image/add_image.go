///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddImageHandlerFunc turns a function with the right signature into a add image handler
type AddImageHandlerFunc func(AddImageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddImageHandlerFunc) Handle(params AddImageParams) middleware.Responder {
	return fn(params)
}

// AddImageHandler interface for that can handle valid add image params
type AddImageHandler interface {
	Handle(AddImageParams) middleware.Responder
}

// NewAddImage creates a new http.Handler for the add image operation
func NewAddImage(ctx *middleware.Context, handler AddImageHandler) *AddImage {
	return &AddImage{Context: ctx, Handler: handler}
}

/*AddImage swagger:route POST /image image addImage

Add a new image

*/
type AddImage struct {
	Context *middleware.Context
	Handler AddImageHandler
}

func (o *AddImage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddImageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
