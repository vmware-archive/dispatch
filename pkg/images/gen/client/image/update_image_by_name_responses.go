///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// UpdateImageByNameReader is a Reader for the UpdateImageByName structure.
type UpdateImageByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateImageByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateImageByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateImageByNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateImageByNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateImageByNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateImageByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateImageByNameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateImageByNameOK creates a UpdateImageByNameOK with default headers values
func NewUpdateImageByNameOK() *UpdateImageByNameOK {
	return &UpdateImageByNameOK{}
}

/*UpdateImageByNameOK handles this case with default header values.

updated
*/
type UpdateImageByNameOK struct {
	Payload *v1.Image
}

func (o *UpdateImageByNameOK) Error() string {
	return fmt.Sprintf("[PUT /image/{imageName}][%d] updateImageByNameOK  %+v", 200, o.Payload)
}

func (o *UpdateImageByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Image)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImageByNameBadRequest creates a UpdateImageByNameBadRequest with default headers values
func NewUpdateImageByNameBadRequest() *UpdateImageByNameBadRequest {
	return &UpdateImageByNameBadRequest{}
}

/*UpdateImageByNameBadRequest handles this case with default header values.

Invalid input
*/
type UpdateImageByNameBadRequest struct {
	Payload *v1.Error
}

func (o *UpdateImageByNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /image/{imageName}][%d] updateImageByNameBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateImageByNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImageByNameUnauthorized creates a UpdateImageByNameUnauthorized with default headers values
func NewUpdateImageByNameUnauthorized() *UpdateImageByNameUnauthorized {
	return &UpdateImageByNameUnauthorized{}
}

/*UpdateImageByNameUnauthorized handles this case with default header values.

Unauthorized Request
*/
type UpdateImageByNameUnauthorized struct {
	Payload *v1.Error
}

func (o *UpdateImageByNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /image/{imageName}][%d] updateImageByNameUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateImageByNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImageByNameForbidden creates a UpdateImageByNameForbidden with default headers values
func NewUpdateImageByNameForbidden() *UpdateImageByNameForbidden {
	return &UpdateImageByNameForbidden{}
}

/*UpdateImageByNameForbidden handles this case with default header values.

access to this resource is forbidden
*/
type UpdateImageByNameForbidden struct {
	Payload *v1.Error
}

func (o *UpdateImageByNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /image/{imageName}][%d] updateImageByNameForbidden  %+v", 403, o.Payload)
}

func (o *UpdateImageByNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImageByNameNotFound creates a UpdateImageByNameNotFound with default headers values
func NewUpdateImageByNameNotFound() *UpdateImageByNameNotFound {
	return &UpdateImageByNameNotFound{}
}

/*UpdateImageByNameNotFound handles this case with default header values.

Image not found
*/
type UpdateImageByNameNotFound struct {
	Payload *v1.Error
}

func (o *UpdateImageByNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /image/{imageName}][%d] updateImageByNameNotFound  %+v", 404, o.Payload)
}

func (o *UpdateImageByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImageByNameDefault creates a UpdateImageByNameDefault with default headers values
func NewUpdateImageByNameDefault(code int) *UpdateImageByNameDefault {
	return &UpdateImageByNameDefault{
		_statusCode: code,
	}
}

/*UpdateImageByNameDefault handles this case with default header values.

Generic error response
*/
type UpdateImageByNameDefault struct {
	_statusCode int

	Payload *v1.Error
}

// Code gets the status code for the update image by name default response
func (o *UpdateImageByNameDefault) Code() int {
	return o._statusCode
}

func (o *UpdateImageByNameDefault) Error() string {
	return fmt.Sprintf("[PUT /image/{imageName}][%d] updateImageByName default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateImageByNameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
