///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/identity-manager/gen/models"
)

// LoginVmwareReader is a Reader for the LoginVmware structure.
type LoginVmwareReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginVmwareReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewLoginVmwareOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 302:
		result := NewLoginVmwareFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewLoginVmwareDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLoginVmwareOK creates a LoginVmwareOK with default headers values
func NewLoginVmwareOK() *LoginVmwareOK {
	return &LoginVmwareOK{}
}

/*LoginVmwareOK handles this case with default header values.

successfully logged in
*/
type LoginVmwareOK struct {
}

func (o *LoginVmwareOK) Error() string {
	return fmt.Sprintf("[GET /login/vmware][%d] loginVmwareOK ", 200)
}

func (o *LoginVmwareOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginVmwareFound creates a LoginVmwareFound with default headers values
func NewLoginVmwareFound() *LoginVmwareFound {
	return &LoginVmwareFound{}
}

/*LoginVmwareFound handles this case with default header values.

successfully logged in, redirect to home page
*/
type LoginVmwareFound struct {
	/*redirect location
	 */
	Location string

	SetCookie string

	Payload *models.Redirect
}

func (o *LoginVmwareFound) Error() string {
	return fmt.Sprintf("[GET /login/vmware][%d] loginVmwareFound  %+v", 302, o.Payload)
}

func (o *LoginVmwareFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	// response header Set-Cookie
	o.SetCookie = response.GetHeader("Set-Cookie")

	o.Payload = new(models.Redirect)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginVmwareDefault creates a LoginVmwareDefault with default headers values
func NewLoginVmwareDefault(code int) *LoginVmwareDefault {
	return &LoginVmwareDefault{
		_statusCode: code,
	}
}

/*LoginVmwareDefault handles this case with default header values.

error
*/
type LoginVmwareDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the login vmware default response
func (o *LoginVmwareDefault) Code() int {
	return o._statusCode
}

func (o *LoginVmwareDefault) Error() string {
	return fmt.Sprintf("[GET /login/vmware][%d] loginVmware default  %+v", o._statusCode, o.Payload)
}

func (o *LoginVmwareDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
