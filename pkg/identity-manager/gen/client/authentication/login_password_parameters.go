///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewLoginPasswordParams creates a new LoginPasswordParams object
// with the default values initialized.
func NewLoginPasswordParams() *LoginPasswordParams {
	var ()
	return &LoginPasswordParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLoginPasswordParamsWithTimeout creates a new LoginPasswordParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLoginPasswordParamsWithTimeout(timeout time.Duration) *LoginPasswordParams {
	var ()
	return &LoginPasswordParams{

		timeout: timeout,
	}
}

// NewLoginPasswordParamsWithContext creates a new LoginPasswordParams object
// with the default values initialized, and the ability to set a context for a request
func NewLoginPasswordParamsWithContext(ctx context.Context) *LoginPasswordParams {
	var ()
	return &LoginPasswordParams{

		Context: ctx,
	}
}

// NewLoginPasswordParamsWithHTTPClient creates a new LoginPasswordParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLoginPasswordParamsWithHTTPClient(client *http.Client) *LoginPasswordParams {
	var ()
	return &LoginPasswordParams{
		HTTPClient: client,
	}
}

/*LoginPasswordParams contains all the parameters to send to the API endpoint
for the login password operation typically these are written to a http.Request
*/
type LoginPasswordParams struct {

	/*Password
	  user password

	*/
	Password *string
	/*Username
	  user name

	*/
	Username *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the login password params
func (o *LoginPasswordParams) WithTimeout(timeout time.Duration) *LoginPasswordParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the login password params
func (o *LoginPasswordParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the login password params
func (o *LoginPasswordParams) WithContext(ctx context.Context) *LoginPasswordParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the login password params
func (o *LoginPasswordParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the login password params
func (o *LoginPasswordParams) WithHTTPClient(client *http.Client) *LoginPasswordParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the login password params
func (o *LoginPasswordParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPassword adds the password to the login password params
func (o *LoginPasswordParams) WithPassword(password *string) *LoginPasswordParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the login password params
func (o *LoginPasswordParams) SetPassword(password *string) {
	o.Password = password
}

// WithUsername adds the username to the login password params
func (o *LoginPasswordParams) WithUsername(username *string) *LoginPasswordParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the login password params
func (o *LoginPasswordParams) SetUsername(username *string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *LoginPasswordParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Password != nil {

		// query param password
		var qrPassword string
		if o.Password != nil {
			qrPassword = *o.Password
		}
		qPassword := qrPassword
		if qPassword != "" {
			if err := r.SetQueryParam("password", qPassword); err != nil {
				return err
			}
		}

	}

	if o.Username != nil {

		// query param username
		var qrUsername string
		if o.Username != nil {
			qrUsername = *o.Username
		}
		qUsername := qrUsername
		if qUsername != "" {
			if err := r.SetQueryParam("username", qUsername); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
