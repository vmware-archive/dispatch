///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// AddOrganizationReader is a Reader for the AddOrganization structure.
type AddOrganizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddOrganizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewAddOrganizationCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddOrganizationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAddOrganizationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAddOrganizationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAddOrganizationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddOrganizationCreated creates a AddOrganizationCreated with default headers values
func NewAddOrganizationCreated() *AddOrganizationCreated {
	return &AddOrganizationCreated{}
}

/*AddOrganizationCreated handles this case with default header values.

created
*/
type AddOrganizationCreated struct {
	Payload *v1.Organization
}

func (o *AddOrganizationCreated) Error() string {
	return fmt.Sprintf("[POST /v1/iam/organization][%d] addOrganizationCreated  %+v", 201, o.Payload)
}

func (o *AddOrganizationCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Organization)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddOrganizationBadRequest creates a AddOrganizationBadRequest with default headers values
func NewAddOrganizationBadRequest() *AddOrganizationBadRequest {
	return &AddOrganizationBadRequest{}
}

/*AddOrganizationBadRequest handles this case with default header values.

Invalid input
*/
type AddOrganizationBadRequest struct {
	Payload *v1.Error
}

func (o *AddOrganizationBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/iam/organization][%d] addOrganizationBadRequest  %+v", 400, o.Payload)
}

func (o *AddOrganizationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddOrganizationConflict creates a AddOrganizationConflict with default headers values
func NewAddOrganizationConflict() *AddOrganizationConflict {
	return &AddOrganizationConflict{}
}

/*AddOrganizationConflict handles this case with default header values.

Already Exists
*/
type AddOrganizationConflict struct {
	Payload *v1.Error
}

func (o *AddOrganizationConflict) Error() string {
	return fmt.Sprintf("[POST /v1/iam/organization][%d] addOrganizationConflict  %+v", 409, o.Payload)
}

func (o *AddOrganizationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddOrganizationInternalServerError creates a AddOrganizationInternalServerError with default headers values
func NewAddOrganizationInternalServerError() *AddOrganizationInternalServerError {
	return &AddOrganizationInternalServerError{}
}

/*AddOrganizationInternalServerError handles this case with default header values.

Internal Error
*/
type AddOrganizationInternalServerError struct {
	Payload *v1.Error
}

func (o *AddOrganizationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/iam/organization][%d] addOrganizationInternalServerError  %+v", 500, o.Payload)
}

func (o *AddOrganizationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddOrganizationDefault creates a AddOrganizationDefault with default headers values
func NewAddOrganizationDefault(code int) *AddOrganizationDefault {
	return &AddOrganizationDefault{
		_statusCode: code,
	}
}

/*AddOrganizationDefault handles this case with default header values.

Generic error response
*/
type AddOrganizationDefault struct {
	_statusCode int

	Payload *v1.Error
}

// Code gets the status code for the add organization default response
func (o *AddOrganizationDefault) Code() int {
	return o._statusCode
}

func (o *AddOrganizationDefault) Error() string {
	return fmt.Sprintf("[POST /v1/iam/organization][%d] addOrganization default  %+v", o._statusCode, o.Payload)
}

func (o *AddOrganizationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
