///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/identity-manager/gen/models"
)

// Oauth2Reader is a Reader for the Oauth2 structure.
type Oauth2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *Oauth2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewOauth2Accepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewOauth2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewOauth2Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewOauth2Accepted creates a Oauth2Accepted with default headers values
func NewOauth2Accepted() *Oauth2Accepted {
	return &Oauth2Accepted{}
}

/*Oauth2Accepted handles this case with default header values.

default response if authenticated
*/
type Oauth2Accepted struct {
	Payload *models.Message
}

func (o *Oauth2Accepted) Error() string {
	return fmt.Sprintf("[GET /v1/iam/auth][%d] oauth2Accepted  %+v", 202, o.Payload)
}

func (o *Oauth2Accepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOauth2Unauthorized creates a Oauth2Unauthorized with default headers values
func NewOauth2Unauthorized() *Oauth2Unauthorized {
	return &Oauth2Unauthorized{}
}

/*Oauth2Unauthorized handles this case with default header values.

redirect
*/
type Oauth2Unauthorized struct {
	/*redirect location
	 */
	Location string
}

func (o *Oauth2Unauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/iam/auth][%d] oauth2Unauthorized ", 401)
}

func (o *Oauth2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewOauth2Default creates a Oauth2Default with default headers values
func NewOauth2Default(code int) *Oauth2Default {
	return &Oauth2Default{
		_statusCode: code,
	}
}

/*Oauth2Default handles this case with default header values.

error
*/
type Oauth2Default struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the oauth2 default response
func (o *Oauth2Default) Code() int {
	return o._statusCode
}

func (o *Oauth2Default) Error() string {
	return fmt.Sprintf("[GET /v1/iam/auth][%d] oauth2 default  %+v", o._statusCode, o.Payload)
}

func (o *Oauth2Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
