///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/vmware/dispatch/pkg/identity-manager/gen/restapi/operations/organization"
	"github.com/vmware/dispatch/pkg/identity-manager/gen/restapi/operations/policy"
	"github.com/vmware/dispatch/pkg/identity-manager/gen/restapi/operations/serviceaccount"
)

// NewIdentityManagerAPI creates a new IdentityManager instance
func NewIdentityManagerAPI(spec *loads.Document) *IdentityManagerAPI {
	return &IdentityManagerAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		OrganizationAddOrganizationHandler: organization.AddOrganizationHandlerFunc(func(params organization.AddOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationAddOrganization has not yet been implemented")
		}),
		PolicyAddPolicyHandler: policy.AddPolicyHandlerFunc(func(params policy.AddPolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PolicyAddPolicy has not yet been implemented")
		}),
		ServiceaccountAddServiceAccountHandler: serviceaccount.AddServiceAccountHandlerFunc(func(params serviceaccount.AddServiceAccountParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServiceaccountAddServiceAccount has not yet been implemented")
		}),
		AuthHandler: AuthHandlerFunc(func(params AuthParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation Auth has not yet been implemented")
		}),
		OrganizationDeleteOrganizationHandler: organization.DeleteOrganizationHandlerFunc(func(params organization.DeleteOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationDeleteOrganization has not yet been implemented")
		}),
		PolicyDeletePolicyHandler: policy.DeletePolicyHandlerFunc(func(params policy.DeletePolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PolicyDeletePolicy has not yet been implemented")
		}),
		ServiceaccountDeleteServiceAccountHandler: serviceaccount.DeleteServiceAccountHandlerFunc(func(params serviceaccount.DeleteServiceAccountParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServiceaccountDeleteServiceAccount has not yet been implemented")
		}),
		OrganizationGetOrganizationHandler: organization.GetOrganizationHandlerFunc(func(params organization.GetOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationGetOrganization has not yet been implemented")
		}),
		OrganizationGetOrganizationsHandler: organization.GetOrganizationsHandlerFunc(func(params organization.GetOrganizationsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationGetOrganizations has not yet been implemented")
		}),
		PolicyGetPoliciesHandler: policy.GetPoliciesHandlerFunc(func(params policy.GetPoliciesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PolicyGetPolicies has not yet been implemented")
		}),
		PolicyGetPolicyHandler: policy.GetPolicyHandlerFunc(func(params policy.GetPolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PolicyGetPolicy has not yet been implemented")
		}),
		ServiceaccountGetServiceAccountHandler: serviceaccount.GetServiceAccountHandlerFunc(func(params serviceaccount.GetServiceAccountParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServiceaccountGetServiceAccount has not yet been implemented")
		}),
		ServiceaccountGetServiceAccountsHandler: serviceaccount.GetServiceAccountsHandlerFunc(func(params serviceaccount.GetServiceAccountsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServiceaccountGetServiceAccounts has not yet been implemented")
		}),
		HomeHandler: HomeHandlerFunc(func(params HomeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation Home has not yet been implemented")
		}),
		RedirectHandler: RedirectHandlerFunc(func(params RedirectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation Redirect has not yet been implemented")
		}),
		RootHandler: RootHandlerFunc(func(params RootParams) middleware.Responder {
			return middleware.NotImplemented("operation Root has not yet been implemented")
		}),
		OrganizationUpdateOrganizationHandler: organization.UpdateOrganizationHandlerFunc(func(params organization.UpdateOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationUpdateOrganization has not yet been implemented")
		}),
		PolicyUpdatePolicyHandler: policy.UpdatePolicyHandlerFunc(func(params policy.UpdatePolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PolicyUpdatePolicy has not yet been implemented")
		}),
		ServiceaccountUpdateServiceAccountHandler: serviceaccount.UpdateServiceAccountHandlerFunc(func(params serviceaccount.UpdateServiceAccountParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServiceaccountUpdateServiceAccount has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		BearerAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (bearer) Authorization from header param [Authorization] has not yet been implemented")
		},
		// Applies when the "Cookie" header is set
		CookieAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (cookie) Cookie from header param [Cookie] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*IdentityManagerAPI VMware Dispatch Identity Manager
 */
type IdentityManagerAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// BearerAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	BearerAuth func(string) (interface{}, error)

	// CookieAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Cookie provided in the header
	CookieAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// OrganizationAddOrganizationHandler sets the operation handler for the add organization operation
	OrganizationAddOrganizationHandler organization.AddOrganizationHandler
	// PolicyAddPolicyHandler sets the operation handler for the add policy operation
	PolicyAddPolicyHandler policy.AddPolicyHandler
	// ServiceaccountAddServiceAccountHandler sets the operation handler for the add service account operation
	ServiceaccountAddServiceAccountHandler serviceaccount.AddServiceAccountHandler
	// AuthHandler sets the operation handler for the auth operation
	AuthHandler AuthHandler
	// OrganizationDeleteOrganizationHandler sets the operation handler for the delete organization operation
	OrganizationDeleteOrganizationHandler organization.DeleteOrganizationHandler
	// PolicyDeletePolicyHandler sets the operation handler for the delete policy operation
	PolicyDeletePolicyHandler policy.DeletePolicyHandler
	// ServiceaccountDeleteServiceAccountHandler sets the operation handler for the delete service account operation
	ServiceaccountDeleteServiceAccountHandler serviceaccount.DeleteServiceAccountHandler
	// OrganizationGetOrganizationHandler sets the operation handler for the get organization operation
	OrganizationGetOrganizationHandler organization.GetOrganizationHandler
	// OrganizationGetOrganizationsHandler sets the operation handler for the get organizations operation
	OrganizationGetOrganizationsHandler organization.GetOrganizationsHandler
	// PolicyGetPoliciesHandler sets the operation handler for the get policies operation
	PolicyGetPoliciesHandler policy.GetPoliciesHandler
	// PolicyGetPolicyHandler sets the operation handler for the get policy operation
	PolicyGetPolicyHandler policy.GetPolicyHandler
	// ServiceaccountGetServiceAccountHandler sets the operation handler for the get service account operation
	ServiceaccountGetServiceAccountHandler serviceaccount.GetServiceAccountHandler
	// ServiceaccountGetServiceAccountsHandler sets the operation handler for the get service accounts operation
	ServiceaccountGetServiceAccountsHandler serviceaccount.GetServiceAccountsHandler
	// HomeHandler sets the operation handler for the home operation
	HomeHandler HomeHandler
	// RedirectHandler sets the operation handler for the redirect operation
	RedirectHandler RedirectHandler
	// RootHandler sets the operation handler for the root operation
	RootHandler RootHandler
	// OrganizationUpdateOrganizationHandler sets the operation handler for the update organization operation
	OrganizationUpdateOrganizationHandler organization.UpdateOrganizationHandler
	// PolicyUpdatePolicyHandler sets the operation handler for the update policy operation
	PolicyUpdatePolicyHandler policy.UpdatePolicyHandler
	// ServiceaccountUpdateServiceAccountHandler sets the operation handler for the update service account operation
	ServiceaccountUpdateServiceAccountHandler serviceaccount.UpdateServiceAccountHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *IdentityManagerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *IdentityManagerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *IdentityManagerAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *IdentityManagerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *IdentityManagerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *IdentityManagerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *IdentityManagerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the IdentityManagerAPI
func (o *IdentityManagerAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BearerAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.CookieAuth == nil {
		unregistered = append(unregistered, "CookieAuth")
	}

	if o.OrganizationAddOrganizationHandler == nil {
		unregistered = append(unregistered, "organization.AddOrganizationHandler")
	}

	if o.PolicyAddPolicyHandler == nil {
		unregistered = append(unregistered, "policy.AddPolicyHandler")
	}

	if o.ServiceaccountAddServiceAccountHandler == nil {
		unregistered = append(unregistered, "serviceaccount.AddServiceAccountHandler")
	}

	if o.AuthHandler == nil {
		unregistered = append(unregistered, "AuthHandler")
	}

	if o.OrganizationDeleteOrganizationHandler == nil {
		unregistered = append(unregistered, "organization.DeleteOrganizationHandler")
	}

	if o.PolicyDeletePolicyHandler == nil {
		unregistered = append(unregistered, "policy.DeletePolicyHandler")
	}

	if o.ServiceaccountDeleteServiceAccountHandler == nil {
		unregistered = append(unregistered, "serviceaccount.DeleteServiceAccountHandler")
	}

	if o.OrganizationGetOrganizationHandler == nil {
		unregistered = append(unregistered, "organization.GetOrganizationHandler")
	}

	if o.OrganizationGetOrganizationsHandler == nil {
		unregistered = append(unregistered, "organization.GetOrganizationsHandler")
	}

	if o.PolicyGetPoliciesHandler == nil {
		unregistered = append(unregistered, "policy.GetPoliciesHandler")
	}

	if o.PolicyGetPolicyHandler == nil {
		unregistered = append(unregistered, "policy.GetPolicyHandler")
	}

	if o.ServiceaccountGetServiceAccountHandler == nil {
		unregistered = append(unregistered, "serviceaccount.GetServiceAccountHandler")
	}

	if o.ServiceaccountGetServiceAccountsHandler == nil {
		unregistered = append(unregistered, "serviceaccount.GetServiceAccountsHandler")
	}

	if o.HomeHandler == nil {
		unregistered = append(unregistered, "HomeHandler")
	}

	if o.RedirectHandler == nil {
		unregistered = append(unregistered, "RedirectHandler")
	}

	if o.RootHandler == nil {
		unregistered = append(unregistered, "RootHandler")
	}

	if o.OrganizationUpdateOrganizationHandler == nil {
		unregistered = append(unregistered, "organization.UpdateOrganizationHandler")
	}

	if o.PolicyUpdatePolicyHandler == nil {
		unregistered = append(unregistered, "policy.UpdatePolicyHandler")
	}

	if o.ServiceaccountUpdateServiceAccountHandler == nil {
		unregistered = append(unregistered, "serviceaccount.UpdateServiceAccountHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *IdentityManagerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *IdentityManagerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "bearer":

			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.BearerAuth)

		case "cookie":

			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.CookieAuth)

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *IdentityManagerAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *IdentityManagerAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *IdentityManagerAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *IdentityManagerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the identity manager API
func (o *IdentityManagerAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *IdentityManagerAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/iam/organization"] = organization.NewAddOrganization(o.context, o.OrganizationAddOrganizationHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/iam/policy"] = policy.NewAddPolicy(o.context, o.PolicyAddPolicyHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/iam/serviceaccount"] = serviceaccount.NewAddServiceAccount(o.context, o.ServiceaccountAddServiceAccountHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/iam/auth"] = NewAuth(o.context, o.AuthHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/iam/organization/{organizationName}"] = organization.NewDeleteOrganization(o.context, o.OrganizationDeleteOrganizationHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/iam/policy/{policyName}"] = policy.NewDeletePolicy(o.context, o.PolicyDeletePolicyHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/iam/serviceaccount/{serviceAccountName}"] = serviceaccount.NewDeleteServiceAccount(o.context, o.ServiceaccountDeleteServiceAccountHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/iam/organization/{organizationName}"] = organization.NewGetOrganization(o.context, o.OrganizationGetOrganizationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/iam/organization"] = organization.NewGetOrganizations(o.context, o.OrganizationGetOrganizationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/iam/policy"] = policy.NewGetPolicies(o.context, o.PolicyGetPoliciesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/iam/policy/{policyName}"] = policy.NewGetPolicy(o.context, o.PolicyGetPolicyHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/iam/serviceaccount/{serviceAccountName}"] = serviceaccount.NewGetServiceAccount(o.context, o.ServiceaccountGetServiceAccountHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/iam/serviceaccount"] = serviceaccount.NewGetServiceAccounts(o.context, o.ServiceaccountGetServiceAccountsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/iam/home"] = NewHome(o.context, o.HomeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/iam/redirect"] = NewRedirect(o.context, o.RedirectHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"][""] = NewRoot(o.context, o.RootHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/iam/organization/{organizationName}"] = organization.NewUpdateOrganization(o.context, o.OrganizationUpdateOrganizationHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/iam/policy/{policyName}"] = policy.NewUpdatePolicy(o.context, o.PolicyUpdatePolicyHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/iam/serviceaccount/{serviceAccountName}"] = serviceaccount.NewUpdateServiceAccount(o.context, o.ServiceaccountUpdateServiceAccountHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *IdentityManagerAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *IdentityManagerAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *IdentityManagerAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *IdentityManagerAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
