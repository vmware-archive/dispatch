///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/dispatch/pkg/identity-manager/gen/models"
)

// Oauth2AcceptedCode is the HTTP code returned for type Oauth2Accepted
const Oauth2AcceptedCode int = 202

/*Oauth2Accepted default response if authenticated

swagger:response oauth2Accepted
*/
type Oauth2Accepted struct {

	/*
	  In: Body
	*/
	Payload *models.Message `json:"body,omitempty"`
}

// NewOauth2Accepted creates Oauth2Accepted with default headers values
func NewOauth2Accepted() *Oauth2Accepted {
	return &Oauth2Accepted{}
}

// WithPayload adds the payload to the oauth2 accepted response
func (o *Oauth2Accepted) WithPayload(payload *models.Message) *Oauth2Accepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the oauth2 accepted response
func (o *Oauth2Accepted) SetPayload(payload *models.Message) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *Oauth2Accepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Oauth2UnauthorizedCode is the HTTP code returned for type Oauth2Unauthorized
const Oauth2UnauthorizedCode int = 401

/*Oauth2Unauthorized redirect

swagger:response oauth2Unauthorized
*/
type Oauth2Unauthorized struct {
	/*redirect location
	  Required: true
	*/
	Location string `json:"Location"`
}

// NewOauth2Unauthorized creates Oauth2Unauthorized with default headers values
func NewOauth2Unauthorized() *Oauth2Unauthorized {
	return &Oauth2Unauthorized{}
}

// WithLocation adds the location to the oauth2 unauthorized response
func (o *Oauth2Unauthorized) WithLocation(location string) *Oauth2Unauthorized {
	o.Location = location
	return o
}

// SetLocation sets the location to the oauth2 unauthorized response
func (o *Oauth2Unauthorized) SetLocation(location string) {
	o.Location = location
}

// WriteResponse to the client
func (o *Oauth2Unauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	rw.WriteHeader(401)
}

/*Oauth2Default error

swagger:response oauth2Default
*/
type Oauth2Default struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewOauth2Default creates Oauth2Default with default headers values
func NewOauth2Default(code int) *Oauth2Default {
	if code <= 0 {
		code = 500
	}

	return &Oauth2Default{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the oauth2 default response
func (o *Oauth2Default) WithStatusCode(code int) *Oauth2Default {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the oauth2 default response
func (o *Oauth2Default) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the oauth2 default response
func (o *Oauth2Default) WithPayload(payload *models.Error) *Oauth2Default {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the oauth2 default response
func (o *Oauth2Default) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *Oauth2Default) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
