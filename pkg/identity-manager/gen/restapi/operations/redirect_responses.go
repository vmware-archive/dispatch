///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/dispatch/pkg/identity-manager/gen/models"
)

// RedirectFoundCode is the HTTP code returned for type RedirectFound
const RedirectFoundCode int = 302

/*RedirectFound redirect

swagger:response redirectFound
*/
type RedirectFound struct {
	/*redirect location
	  Required: true
	*/
	Location string `json:"Location"`
}

// NewRedirectFound creates RedirectFound with default headers values
func NewRedirectFound() *RedirectFound {
	return &RedirectFound{}
}

// WithLocation adds the location to the redirect found response
func (o *RedirectFound) WithLocation(location string) *RedirectFound {
	o.Location = location
	return o
}

// SetLocation sets the location to the redirect found response
func (o *RedirectFound) SetLocation(location string) {
	o.Location = location
}

// WriteResponse to the client
func (o *RedirectFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	rw.WriteHeader(302)
}

/*RedirectDefault error

swagger:response redirectDefault
*/
type RedirectDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRedirectDefault creates RedirectDefault with default headers values
func NewRedirectDefault(code int) *RedirectDefault {
	if code <= 0 {
		code = 500
	}

	return &RedirectDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the redirect default response
func (o *RedirectDefault) WithStatusCode(code int) *RedirectDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the redirect default response
func (o *RedirectDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the redirect default response
func (o *RedirectDefault) WithPayload(payload *models.Error) *RedirectDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the redirect default response
func (o *RedirectDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RedirectDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
