///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/dispatch/pkg/identity-manager/gen/models"
)

// LoginVmwareOKCode is the HTTP code returned for type LoginVmwareOK
const LoginVmwareOKCode int = 200

/*LoginVmwareOK successfully logged in

swagger:response loginVmwareOK
*/
type LoginVmwareOK struct {
}

// NewLoginVmwareOK creates LoginVmwareOK with default headers values
func NewLoginVmwareOK() *LoginVmwareOK {
	return &LoginVmwareOK{}
}

// WriteResponse to the client
func (o *LoginVmwareOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

// LoginVmwareFoundCode is the HTTP code returned for type LoginVmwareFound
const LoginVmwareFoundCode int = 302

/*LoginVmwareFound successfully logged in, redirect to home page

swagger:response loginVmwareFound
*/
type LoginVmwareFound struct {
	/*redirect location
	  Required: true
	*/
	Location string `json:"Location"`
	/*
	  Required: true
	*/
	SetCookie string `json:"Set-Cookie"`

	/*
	  In: Body
	*/
	Payload *models.Redirect `json:"body,omitempty"`
}

// NewLoginVmwareFound creates LoginVmwareFound with default headers values
func NewLoginVmwareFound() *LoginVmwareFound {
	return &LoginVmwareFound{}
}

// WithLocation adds the location to the login vmware found response
func (o *LoginVmwareFound) WithLocation(location string) *LoginVmwareFound {
	o.Location = location
	return o
}

// SetLocation sets the location to the login vmware found response
func (o *LoginVmwareFound) SetLocation(location string) {
	o.Location = location
}

// WithSetCookie adds the setCookie to the login vmware found response
func (o *LoginVmwareFound) WithSetCookie(setCookie string) *LoginVmwareFound {
	o.SetCookie = setCookie
	return o
}

// SetSetCookie sets the setCookie to the login vmware found response
func (o *LoginVmwareFound) SetSetCookie(setCookie string) {
	o.SetCookie = setCookie
}

// WithPayload adds the payload to the login vmware found response
func (o *LoginVmwareFound) WithPayload(payload *models.Redirect) *LoginVmwareFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the login vmware found response
func (o *LoginVmwareFound) SetPayload(payload *models.Redirect) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoginVmwareFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	// response header Set-Cookie

	setCookie := o.SetCookie
	if setCookie != "" {
		rw.Header().Set("Set-Cookie", setCookie)
	}

	rw.WriteHeader(302)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*LoginVmwareDefault error

swagger:response loginVmwareDefault
*/
type LoginVmwareDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoginVmwareDefault creates LoginVmwareDefault with default headers values
func NewLoginVmwareDefault(code int) *LoginVmwareDefault {
	if code <= 0 {
		code = 500
	}

	return &LoginVmwareDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the login vmware default response
func (o *LoginVmwareDefault) WithStatusCode(code int) *LoginVmwareDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the login vmware default response
func (o *LoginVmwareDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the login vmware default response
func (o *LoginVmwareDefault) WithPayload(payload *models.Error) *LoginVmwareDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the login vmware default response
func (o *LoginVmwareDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoginVmwareDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
