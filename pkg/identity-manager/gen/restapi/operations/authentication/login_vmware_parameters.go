///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewLoginVmwareParams creates a new LoginVmwareParams object
// with the default values initialized.
func NewLoginVmwareParams() LoginVmwareParams {
	var ()
	return LoginVmwareParams{}
}

// LoginVmwareParams contains all the bound params for the login vmware operation
// typically these are obtained from a http.Request
//
// swagger:parameters loginVmware
type LoginVmwareParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*required if authenticated, the authorization code (short-living) generated by the OpenID Provider, used for the client app to exchange for Access Token and/or Id_Token
	  In: query
	*/
	Code *string
	/*required if not authenticated, the error code returned if the End-User denies the request or the End-User authentication fails.
	  In: query
	*/
	Error *string
	/*optional, Human-readable ASCII encoded text description of the error.
	  In: query
	*/
	ErrorDescription *string
	/*optional, URI of a web page that includes additional information about the error.
	  In: query
	*/
	ErrorURI *string
	/*OAuth 2.0 state value. required if the Authorization Request included the state parameter. Set to the value received from the Client App (i.e. us).
	  In: query
	*/
	State *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *LoginVmwareParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCode, qhkCode, _ := qs.GetOK("code")
	if err := o.bindCode(qCode, qhkCode, route.Formats); err != nil {
		res = append(res, err)
	}

	qError, qhkError, _ := qs.GetOK("error")
	if err := o.bindError(qError, qhkError, route.Formats); err != nil {
		res = append(res, err)
	}

	qErrorDescription, qhkErrorDescription, _ := qs.GetOK("error_description")
	if err := o.bindErrorDescription(qErrorDescription, qhkErrorDescription, route.Formats); err != nil {
		res = append(res, err)
	}

	qErrorURI, qhkErrorURI, _ := qs.GetOK("error_uri")
	if err := o.bindErrorURI(qErrorURI, qhkErrorURI, route.Formats); err != nil {
		res = append(res, err)
	}

	qState, qhkState, _ := qs.GetOK("state")
	if err := o.bindState(qState, qhkState, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginVmwareParams) bindCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Code = &raw

	return nil
}

func (o *LoginVmwareParams) bindError(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Error = &raw

	return nil
}

func (o *LoginVmwareParams) bindErrorDescription(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ErrorDescription = &raw

	return nil
}

func (o *LoginVmwareParams) bindErrorURI(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ErrorURI = &raw

	return nil
}

func (o *LoginVmwareParams) bindState(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.State = &raw

	return nil
}
