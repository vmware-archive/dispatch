///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// LoginVmwareHandlerFunc turns a function with the right signature into a login vmware handler
type LoginVmwareHandlerFunc func(LoginVmwareParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LoginVmwareHandlerFunc) Handle(params LoginVmwareParams) middleware.Responder {
	return fn(params)
}

// LoginVmwareHandler interface for that can handle valid login vmware params
type LoginVmwareHandler interface {
	Handle(LoginVmwareParams) middleware.Responder
}

// NewLoginVmware creates a new http.Handler for the login vmware operation
func NewLoginVmware(ctx *middleware.Context, handler LoginVmwareHandler) *LoginVmware {
	return &LoginVmware{Context: ctx, Handler: handler}
}

/*LoginVmware swagger:route GET /login/vmware authentication loginVmware

the URL to which the Identity Provider (e.g. vIDM) will redirect the browser after authorization has been granted by the user

*/
type LoginVmware struct {
	Context *middleware.Context
	Handler LoginVmwareHandler
}

func (o *LoginVmware) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewLoginVmwareParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
