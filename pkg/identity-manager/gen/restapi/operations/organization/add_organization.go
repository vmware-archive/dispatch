///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddOrganizationHandlerFunc turns a function with the right signature into a add organization handler
type AddOrganizationHandlerFunc func(AddOrganizationParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn AddOrganizationHandlerFunc) Handle(params AddOrganizationParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// AddOrganizationHandler interface for that can handle valid add organization params
type AddOrganizationHandler interface {
	Handle(AddOrganizationParams, interface{}) middleware.Responder
}

// NewAddOrganization creates a new http.Handler for the add organization operation
func NewAddOrganization(ctx *middleware.Context, handler AddOrganizationHandler) *AddOrganization {
	return &AddOrganization{Context: ctx, Handler: handler}
}

/*AddOrganization swagger:route POST /v1/iam/organization organization addOrganization

Add a new organization

*/
type AddOrganization struct {
	Context *middleware.Context
	Handler AddOrganizationHandler
}

func (o *AddOrganization) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddOrganizationParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
