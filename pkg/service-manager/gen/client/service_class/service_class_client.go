///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package service_class

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new service class API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service class API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetServiceClassByName finds service class by name

Returns a single service class
*/
func (a *Client) GetServiceClassByName(params *GetServiceClassByNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceClassByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceClassByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceClassByName",
		Method:             "GET",
		PathPattern:        "/serviceclass/{serviceClassName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceClassByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServiceClassByNameOK), nil

}

/*
GetServiceClasses lists all existing service classes
*/
func (a *Client) GetServiceClasses(params *GetServiceClassesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceClassesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceClassesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceClasses",
		Method:             "GET",
		PathPattern:        "/serviceclass",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceClassesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServiceClassesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
