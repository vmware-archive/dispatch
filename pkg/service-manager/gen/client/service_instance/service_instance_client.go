///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package service_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new service instance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service instance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddServiceInstance adds a new service instance
*/
func (a *Client) AddServiceInstance(params *AddServiceInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*AddServiceInstanceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddServiceInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addServiceInstance",
		Method:             "POST",
		PathPattern:        "/serviceinstance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddServiceInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddServiceInstanceCreated), nil

}

/*
DeleteServiceInstanceByName deletes a service instance
*/
func (a *Client) DeleteServiceInstanceByName(params *DeleteServiceInstanceByNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceInstanceByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceInstanceByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteServiceInstanceByName",
		Method:             "DELETE",
		PathPattern:        "/serviceinstance/{serviceInstanceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteServiceInstanceByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteServiceInstanceByNameOK), nil

}

/*
GetServiceInstanceByName finds service instance by name

Returns a single service instance
*/
func (a *Client) GetServiceInstanceByName(params *GetServiceInstanceByNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceInstanceByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceInstanceByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceInstanceByName",
		Method:             "GET",
		PathPattern:        "/serviceinstance/{serviceInstanceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceInstanceByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServiceInstanceByNameOK), nil

}

/*
GetServiceInstances gets all service instances

List all service instances
*/
func (a *Client) GetServiceInstances(params *GetServiceInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceInstances",
		Method:             "GET",
		PathPattern:        "/serviceinstance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServiceInstancesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
