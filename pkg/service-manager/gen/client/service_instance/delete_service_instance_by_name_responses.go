///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package service_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/dispatch/pkg/service-manager/gen/models"
)

// DeleteServiceInstanceByNameReader is a Reader for the DeleteServiceInstanceByName structure.
type DeleteServiceInstanceByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteServiceInstanceByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteServiceInstanceByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteServiceInstanceByNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteServiceInstanceByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteServiceInstanceByNameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteServiceInstanceByNameOK creates a DeleteServiceInstanceByNameOK with default headers values
func NewDeleteServiceInstanceByNameOK() *DeleteServiceInstanceByNameOK {
	return &DeleteServiceInstanceByNameOK{}
}

/*DeleteServiceInstanceByNameOK handles this case with default header values.

successful operation
*/
type DeleteServiceInstanceByNameOK struct {
	Payload *models.ServiceInstance
}

func (o *DeleteServiceInstanceByNameOK) Error() string {
	return fmt.Sprintf("[DELETE /serviceinstance/{serviceInstanceName}][%d] deleteServiceInstanceByNameOK  %+v", 200, o.Payload)
}

func (o *DeleteServiceInstanceByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceInstance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteServiceInstanceByNameBadRequest creates a DeleteServiceInstanceByNameBadRequest with default headers values
func NewDeleteServiceInstanceByNameBadRequest() *DeleteServiceInstanceByNameBadRequest {
	return &DeleteServiceInstanceByNameBadRequest{}
}

/*DeleteServiceInstanceByNameBadRequest handles this case with default header values.

Invalid name supplied
*/
type DeleteServiceInstanceByNameBadRequest struct {
	Payload *models.Error
}

func (o *DeleteServiceInstanceByNameBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /serviceinstance/{serviceInstanceName}][%d] deleteServiceInstanceByNameBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteServiceInstanceByNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteServiceInstanceByNameNotFound creates a DeleteServiceInstanceByNameNotFound with default headers values
func NewDeleteServiceInstanceByNameNotFound() *DeleteServiceInstanceByNameNotFound {
	return &DeleteServiceInstanceByNameNotFound{}
}

/*DeleteServiceInstanceByNameNotFound handles this case with default header values.

Service instance not found
*/
type DeleteServiceInstanceByNameNotFound struct {
	Payload *models.Error
}

func (o *DeleteServiceInstanceByNameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /serviceinstance/{serviceInstanceName}][%d] deleteServiceInstanceByNameNotFound  %+v", 404, o.Payload)
}

func (o *DeleteServiceInstanceByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteServiceInstanceByNameDefault creates a DeleteServiceInstanceByNameDefault with default headers values
func NewDeleteServiceInstanceByNameDefault(code int) *DeleteServiceInstanceByNameDefault {
	return &DeleteServiceInstanceByNameDefault{
		_statusCode: code,
	}
}

/*DeleteServiceInstanceByNameDefault handles this case with default header values.

Generic error response
*/
type DeleteServiceInstanceByNameDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete service instance by name default response
func (o *DeleteServiceInstanceByNameDefault) Code() int {
	return o._statusCode
}

func (o *DeleteServiceInstanceByNameDefault) Error() string {
	return fmt.Sprintf("[DELETE /serviceinstance/{serviceInstanceName}][%d] deleteServiceInstanceByName default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteServiceInstanceByNameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
