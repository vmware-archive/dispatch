///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package service_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/vmware/dispatch/pkg/service-manager/gen/models"
)

// GetServiceInstanceByNameOKCode is the HTTP code returned for type GetServiceInstanceByNameOK
const GetServiceInstanceByNameOKCode int = 200

/*GetServiceInstanceByNameOK successful operation

swagger:response getServiceInstanceByNameOK
*/
type GetServiceInstanceByNameOK struct {

	/*
	  In: Body
	*/
	Payload *models.ServiceInstance `json:"body,omitempty"`
}

// NewGetServiceInstanceByNameOK creates GetServiceInstanceByNameOK with default headers values
func NewGetServiceInstanceByNameOK() *GetServiceInstanceByNameOK {

	return &GetServiceInstanceByNameOK{}
}

// WithPayload adds the payload to the get service instance by name o k response
func (o *GetServiceInstanceByNameOK) WithPayload(payload *models.ServiceInstance) *GetServiceInstanceByNameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service instance by name o k response
func (o *GetServiceInstanceByNameOK) SetPayload(payload *models.ServiceInstance) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceInstanceByNameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceInstanceByNameBadRequestCode is the HTTP code returned for type GetServiceInstanceByNameBadRequest
const GetServiceInstanceByNameBadRequestCode int = 400

/*GetServiceInstanceByNameBadRequest Invalid ID supplied

swagger:response getServiceInstanceByNameBadRequest
*/
type GetServiceInstanceByNameBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceInstanceByNameBadRequest creates GetServiceInstanceByNameBadRequest with default headers values
func NewGetServiceInstanceByNameBadRequest() *GetServiceInstanceByNameBadRequest {

	return &GetServiceInstanceByNameBadRequest{}
}

// WithPayload adds the payload to the get service instance by name bad request response
func (o *GetServiceInstanceByNameBadRequest) WithPayload(payload *models.Error) *GetServiceInstanceByNameBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service instance by name bad request response
func (o *GetServiceInstanceByNameBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceInstanceByNameBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceInstanceByNameNotFoundCode is the HTTP code returned for type GetServiceInstanceByNameNotFound
const GetServiceInstanceByNameNotFoundCode int = 404

/*GetServiceInstanceByNameNotFound Service instance not found

swagger:response getServiceInstanceByNameNotFound
*/
type GetServiceInstanceByNameNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceInstanceByNameNotFound creates GetServiceInstanceByNameNotFound with default headers values
func NewGetServiceInstanceByNameNotFound() *GetServiceInstanceByNameNotFound {

	return &GetServiceInstanceByNameNotFound{}
}

// WithPayload adds the payload to the get service instance by name not found response
func (o *GetServiceInstanceByNameNotFound) WithPayload(payload *models.Error) *GetServiceInstanceByNameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service instance by name not found response
func (o *GetServiceInstanceByNameNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceInstanceByNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetServiceInstanceByNameDefault Generic error response

swagger:response getServiceInstanceByNameDefault
*/
type GetServiceInstanceByNameDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceInstanceByNameDefault creates GetServiceInstanceByNameDefault with default headers values
func NewGetServiceInstanceByNameDefault(code int) *GetServiceInstanceByNameDefault {
	if code <= 0 {
		code = 500
	}

	return &GetServiceInstanceByNameDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get service instance by name default response
func (o *GetServiceInstanceByNameDefault) WithStatusCode(code int) *GetServiceInstanceByNameDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get service instance by name default response
func (o *GetServiceInstanceByNameDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get service instance by name default response
func (o *GetServiceInstanceByNameDefault) WithPayload(payload *models.Error) *GetServiceInstanceByNameDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service instance by name default response
func (o *GetServiceInstanceByNameDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceInstanceByNameDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
