///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAppParams creates a new GetAppParams object
// with the default values initialized.
func NewGetAppParams() *GetAppParams {
	var ()
	return &GetAppParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAppParamsWithTimeout creates a new GetAppParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAppParamsWithTimeout(timeout time.Duration) *GetAppParams {
	var ()
	return &GetAppParams{

		timeout: timeout,
	}
}

// NewGetAppParamsWithContext creates a new GetAppParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAppParamsWithContext(ctx context.Context) *GetAppParams {
	var ()
	return &GetAppParams{

		Context: ctx,
	}
}

// NewGetAppParamsWithHTTPClient creates a new GetAppParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAppParamsWithHTTPClient(client *http.Client) *GetAppParams {
	var ()
	return &GetAppParams{
		HTTPClient: client,
	}
}

/*GetAppParams contains all the parameters to send to the API endpoint
for the get app operation typically these are written to a http.Request
*/
type GetAppParams struct {

	/*XDispatchOrg*/
	XDispatchOrg string
	/*Application
	  Name of Application to work on

	*/
	Application string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get app params
func (o *GetAppParams) WithTimeout(timeout time.Duration) *GetAppParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get app params
func (o *GetAppParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get app params
func (o *GetAppParams) WithContext(ctx context.Context) *GetAppParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get app params
func (o *GetAppParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get app params
func (o *GetAppParams) WithHTTPClient(client *http.Client) *GetAppParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get app params
func (o *GetAppParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXDispatchOrg adds the xDispatchOrg to the get app params
func (o *GetAppParams) WithXDispatchOrg(xDispatchOrg string) *GetAppParams {
	o.SetXDispatchOrg(xDispatchOrg)
	return o
}

// SetXDispatchOrg adds the xDispatchOrg to the get app params
func (o *GetAppParams) SetXDispatchOrg(xDispatchOrg string) {
	o.XDispatchOrg = xDispatchOrg
}

// WithApplication adds the application to the get app params
func (o *GetAppParams) WithApplication(application string) *GetAppParams {
	o.SetApplication(application)
	return o
}

// SetApplication adds the application to the get app params
func (o *GetAppParams) SetApplication(application string) {
	o.Application = application
}

// WriteToRequest writes these params to a swagger request
func (o *GetAppParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Dispatch-Org
	if err := r.SetHeaderParam("X-Dispatch-Org", o.XDispatchOrg); err != nil {
		return err
	}

	// path param application
	if err := r.SetPathParam("application", o.Application); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
