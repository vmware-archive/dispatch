// Code generated by mockery v1.0.0

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import v1 "github.com/vmware/dispatch/pkg/api/v1"

// ImagesClient is an autogenerated mock type for the ImagesClient type
type ImagesClient struct {
	mock.Mock
}

// CreateBaseImage provides a mock function with given fields: ctx, organizationID, baseImage
func (_m *ImagesClient) CreateBaseImage(ctx context.Context, organizationID string, baseImage *v1.BaseImage) (*v1.BaseImage, error) {
	ret := _m.Called(ctx, organizationID, baseImage)

	var r0 *v1.BaseImage
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.BaseImage) *v1.BaseImage); ok {
		r0 = rf(ctx, organizationID, baseImage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BaseImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.BaseImage) error); ok {
		r1 = rf(ctx, organizationID, baseImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImage provides a mock function with given fields: ctx, organizationID, image
func (_m *ImagesClient) CreateImage(ctx context.Context, organizationID string, image *v1.Image) (*v1.Image, error) {
	ret := _m.Called(ctx, organizationID, image)

	var r0 *v1.Image
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Image) *v1.Image); ok {
		r0 = rf(ctx, organizationID, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.Image) error); ok {
		r1 = rf(ctx, organizationID, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBaseImage provides a mock function with given fields: ctx, organizationID, baseImageName
func (_m *ImagesClient) DeleteBaseImage(ctx context.Context, organizationID string, baseImageName string) (*v1.BaseImage, error) {
	ret := _m.Called(ctx, organizationID, baseImageName)

	var r0 *v1.BaseImage
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.BaseImage); ok {
		r0 = rf(ctx, organizationID, baseImageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BaseImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, organizationID, baseImageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImage provides a mock function with given fields: ctx, organizationID, imageName
func (_m *ImagesClient) DeleteImage(ctx context.Context, organizationID string, imageName string) (*v1.Image, error) {
	ret := _m.Called(ctx, organizationID, imageName)

	var r0 *v1.Image
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.Image); ok {
		r0 = rf(ctx, organizationID, imageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, organizationID, imageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseImage provides a mock function with given fields: ctx, organizationID, baseImageName
func (_m *ImagesClient) GetBaseImage(ctx context.Context, organizationID string, baseImageName string) (*v1.BaseImage, error) {
	ret := _m.Called(ctx, organizationID, baseImageName)

	var r0 *v1.BaseImage
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.BaseImage); ok {
		r0 = rf(ctx, organizationID, baseImageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BaseImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, organizationID, baseImageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: ctx, organizationID, imageName
func (_m *ImagesClient) GetImage(ctx context.Context, organizationID string, imageName string) (*v1.Image, error) {
	ret := _m.Called(ctx, organizationID, imageName)

	var r0 *v1.Image
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.Image); ok {
		r0 = rf(ctx, organizationID, imageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, organizationID, imageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBaseImages provides a mock function with given fields: ctx, organizationID
func (_m *ImagesClient) ListBaseImages(ctx context.Context, organizationID string) ([]v1.BaseImage, error) {
	ret := _m.Called(ctx, organizationID)

	var r0 []v1.BaseImage
	if rf, ok := ret.Get(0).(func(context.Context, string) []v1.BaseImage); ok {
		r0 = rf(ctx, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.BaseImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImages provides a mock function with given fields: ctx, organizationID
func (_m *ImagesClient) ListImages(ctx context.Context, organizationID string) ([]v1.Image, error) {
	ret := _m.Called(ctx, organizationID)

	var r0 []v1.Image
	if rf, ok := ret.Get(0).(func(context.Context, string) []v1.Image); ok {
		r0 = rf(ctx, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBaseImage provides a mock function with given fields: ctx, organizationID, baseImage
func (_m *ImagesClient) UpdateBaseImage(ctx context.Context, organizationID string, baseImage *v1.BaseImage) (*v1.BaseImage, error) {
	ret := _m.Called(ctx, organizationID, baseImage)

	var r0 *v1.BaseImage
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.BaseImage) *v1.BaseImage); ok {
		r0 = rf(ctx, organizationID, baseImage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BaseImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.BaseImage) error); ok {
		r1 = rf(ctx, organizationID, baseImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImage provides a mock function with given fields: ctx, organizationID, image
func (_m *ImagesClient) UpdateImage(ctx context.Context, organizationID string, image *v1.Image) (*v1.Image, error) {
	ret := _m.Called(ctx, organizationID, image)

	var r0 *v1.Image
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Image) *v1.Image); ok {
		r0 = rf(ctx, organizationID, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.Image) error); ok {
		r1 = rf(ctx, organizationID, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
