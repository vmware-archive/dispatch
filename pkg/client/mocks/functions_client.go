// Code generated by mockery v1.0.0

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import v1 "github.com/vmware/dispatch/pkg/api/v1"

// FunctionsClient is an autogenerated mock type for the FunctionsClient type
type FunctionsClient struct {
	mock.Mock
}

// CreateFunction provides a mock function with given fields: ctx, organizationID, function
func (_m *FunctionsClient) CreateFunction(ctx context.Context, organizationID string, function *v1.Function) (*v1.Function, error) {
	ret := _m.Called(ctx, organizationID, function)

	var r0 *v1.Function
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Function) *v1.Function); ok {
		r0 = rf(ctx, organizationID, function)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.Function) error); ok {
		r1 = rf(ctx, organizationID, function)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFunction provides a mock function with given fields: ctx, organizationID, functionName
func (_m *FunctionsClient) DeleteFunction(ctx context.Context, organizationID string, functionName string) (*v1.Function, error) {
	ret := _m.Called(ctx, organizationID, functionName)

	var r0 *v1.Function
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.Function); ok {
		r0 = rf(ctx, organizationID, functionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, organizationID, functionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFunction provides a mock function with given fields: ctx, organizationID, functionName
func (_m *FunctionsClient) GetFunction(ctx context.Context, organizationID string, functionName string) (*v1.Function, error) {
	ret := _m.Called(ctx, organizationID, functionName)

	var r0 *v1.Function
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.Function); ok {
		r0 = rf(ctx, organizationID, functionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, organizationID, functionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFunctionRun provides a mock function with given fields: ctx, organizationID, functionName, runName
func (_m *FunctionsClient) GetFunctionRun(ctx context.Context, organizationID string, functionName string, runName string) (*v1.Run, error) {
	ret := _m.Called(ctx, organizationID, functionName, runName)

	var r0 *v1.Run
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v1.Run); ok {
		r0 = rf(ctx, organizationID, functionName, runName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, organizationID, functionName, runName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFunctionRuns provides a mock function with given fields: ctx, organizationID, functionName
func (_m *FunctionsClient) ListFunctionRuns(ctx context.Context, organizationID string, functionName string) ([]v1.Run, error) {
	ret := _m.Called(ctx, organizationID, functionName)

	var r0 []v1.Run
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []v1.Run); ok {
		r0 = rf(ctx, organizationID, functionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, organizationID, functionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFunctions provides a mock function with given fields: ctx, organizationID
func (_m *FunctionsClient) ListFunctions(ctx context.Context, organizationID string) ([]v1.Function, error) {
	ret := _m.Called(ctx, organizationID)

	var r0 []v1.Function
	if rf, ok := ret.Get(0).(func(context.Context, string) []v1.Function); ok {
		r0 = rf(ctx, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuns provides a mock function with given fields: ctx, organizationID
func (_m *FunctionsClient) ListRuns(ctx context.Context, organizationID string) ([]v1.Run, error) {
	ret := _m.Called(ctx, organizationID)

	var r0 []v1.Run
	if rf, ok := ret.Get(0).(func(context.Context, string) []v1.Run); ok {
		r0 = rf(ctx, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunFunction provides a mock function with given fields: ctx, organizationID, run
func (_m *FunctionsClient) RunFunction(ctx context.Context, organizationID string, run *v1.Run) (*v1.Run, error) {
	ret := _m.Called(ctx, organizationID, run)

	var r0 *v1.Run
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Run) *v1.Run); ok {
		r0 = rf(ctx, organizationID, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.Run) error); ok {
		r1 = rf(ctx, organizationID, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFunction provides a mock function with given fields: ctx, organizationID, function
func (_m *FunctionsClient) UpdateFunction(ctx context.Context, organizationID string, function *v1.Function) (*v1.Function, error) {
	ret := _m.Called(ctx, organizationID, function)

	var r0 *v1.Function
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Function) *v1.Function); ok {
		r0 = rf(ctx, organizationID, function)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.Function) error); ok {
		r1 = rf(ctx, organizationID, function)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
