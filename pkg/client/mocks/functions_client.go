// Code generated by mockery v1.0.0
package mocks

import client "github.com/vmware/dispatch/pkg/client"
import context "context"
import mock "github.com/stretchr/testify/mock"

// FunctionsClient is an autogenerated mock type for the FunctionsClient type
type FunctionsClient struct {
	mock.Mock
}

// CreateFunction provides a mock function with given fields: _a0, _a1
func (_m *FunctionsClient) CreateFunction(_a0 context.Context, _a1 *client.Function) (*client.Function, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *client.Function
	if rf, ok := ret.Get(0).(func(context.Context, *client.Function) *client.Function); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *client.Function) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFunction provides a mock function with given fields: _a0, _a1
func (_m *FunctionsClient) DeleteFunction(_a0 context.Context, _a1 string) (*client.Function, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *client.Function
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.Function); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFunction provides a mock function with given fields: _a0, _a1
func (_m *FunctionsClient) GetFunction(_a0 context.Context, _a1 string) (*client.Function, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *client.Function
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.Function); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFunctionRun provides a mock function with given fields: ctx, functionName, runName
func (_m *FunctionsClient) GetFunctionRun(ctx context.Context, functionName string, runName string) (*client.FunctionRun, error) {
	ret := _m.Called(ctx, functionName, runName)

	var r0 *client.FunctionRun
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *client.FunctionRun); ok {
		r0 = rf(ctx, functionName, runName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.FunctionRun)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, functionName, runName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFunctionRuns provides a mock function with given fields: _a0, _a1
func (_m *FunctionsClient) ListFunctionRuns(_a0 context.Context, _a1 string) ([]client.FunctionRun, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []client.FunctionRun
	if rf, ok := ret.Get(0).(func(context.Context, string) []client.FunctionRun); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.FunctionRun)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFunctions provides a mock function with given fields: _a0
func (_m *FunctionsClient) ListFunctions(_a0 context.Context) ([]client.Function, error) {
	ret := _m.Called(_a0)

	var r0 []client.Function
	if rf, ok := ret.Get(0).(func(context.Context) []client.Function); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuns provides a mock function with given fields: _a0
func (_m *FunctionsClient) ListRuns(_a0 context.Context) ([]client.FunctionRun, error) {
	ret := _m.Called(_a0)

	var r0 []client.FunctionRun
	if rf, ok := ret.Get(0).(func(context.Context) []client.FunctionRun); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.FunctionRun)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunFunction provides a mock function with given fields: _a0, _a1
func (_m *FunctionsClient) RunFunction(_a0 context.Context, _a1 *client.FunctionRun) (*client.FunctionRun, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *client.FunctionRun
	if rf, ok := ret.Get(0).(func(context.Context, *client.FunctionRun) *client.FunctionRun); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.FunctionRun)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *client.FunctionRun) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFunction provides a mock function with given fields: _a0, _a1
func (_m *FunctionsClient) UpdateFunction(_a0 context.Context, _a1 *client.Function) (*client.Function, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *client.Function
	if rf, ok := ret.Get(0).(func(context.Context, *client.Function) *client.Function); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *client.Function) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
