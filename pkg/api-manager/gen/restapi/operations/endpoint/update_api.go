///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateAPIHandlerFunc turns a function with the right signature into a update API handler
type UpdateAPIHandlerFunc func(UpdateAPIParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateAPIHandlerFunc) Handle(params UpdateAPIParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UpdateAPIHandler interface for that can handle valid update API params
type UpdateAPIHandler interface {
	Handle(UpdateAPIParams, interface{}) middleware.Responder
}

// NewUpdateAPI creates a new http.Handler for the update API operation
func NewUpdateAPI(ctx *middleware.Context, handler UpdateAPIHandler) *UpdateAPI {
	return &UpdateAPI{Context: ctx, Handler: handler}
}

/*UpdateAPI swagger:route PUT /{api} endpoint updateApi

Update an API

*/
type UpdateAPI struct {
	Context *middleware.Context
	Handler UpdateAPIHandler
}

func (o *UpdateAPI) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateAPIParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
