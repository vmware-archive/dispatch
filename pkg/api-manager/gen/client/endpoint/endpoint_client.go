///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new endpoint API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for endpoint API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddAPI adds a new API
*/
func (a *Client) AddAPI(params *AddAPIParams, authInfo runtime.ClientAuthInfoWriter) (*AddAPIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAPIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAPI",
		Method:             "POST",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddAPIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddAPIOK), nil

}

/*
DeleteAPI deletes an API
*/
func (a *Client) DeleteAPI(params *DeleteAPIParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAPI",
		Method:             "DELETE",
		PathPattern:        "/{api}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAPIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIOK), nil

}

/*
GetAPI finds API by name

get an API by name
*/
func (a *Client) GetAPI(params *GetAPIParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAPI",
		Method:             "GET",
		PathPattern:        "/{api}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAPIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIOK), nil

}

/*
GetApis lists all existing apis
*/
func (a *Client) GetApis(params *GetApisParams, authInfo runtime.ClientAuthInfoWriter) (*GetApisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAPIs",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetApisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetApisOK), nil

}

/*
UpdateAPI updates an API
*/
func (a *Client) UpdateAPI(params *UpdateAPIParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAPIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAPIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAPI",
		Method:             "PUT",
		PathPattern:        "/{api}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateAPIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAPIOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
