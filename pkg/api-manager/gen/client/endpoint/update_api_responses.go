///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api-manager/gen/models"
)

// UpdateAPIReader is a Reader for the UpdateAPI structure.
type UpdateAPIReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAPIReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateAPIOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateAPIBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateAPINotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateAPIInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateAPIOK creates a UpdateAPIOK with default headers values
func NewUpdateAPIOK() *UpdateAPIOK {
	return &UpdateAPIOK{}
}

/*UpdateAPIOK handles this case with default header values.

Successful update
*/
type UpdateAPIOK struct {
	Payload *models.API
}

func (o *UpdateAPIOK) Error() string {
	return fmt.Sprintf("[PUT /{api}][%d] updateApiOK  %+v", 200, o.Payload)
}

func (o *UpdateAPIOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.API)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIBadRequest creates a UpdateAPIBadRequest with default headers values
func NewUpdateAPIBadRequest() *UpdateAPIBadRequest {
	return &UpdateAPIBadRequest{}
}

/*UpdateAPIBadRequest handles this case with default header values.

Invalid input
*/
type UpdateAPIBadRequest struct {
	Payload *models.Error
}

func (o *UpdateAPIBadRequest) Error() string {
	return fmt.Sprintf("[PUT /{api}][%d] updateApiBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAPIBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPINotFound creates a UpdateAPINotFound with default headers values
func NewUpdateAPINotFound() *UpdateAPINotFound {
	return &UpdateAPINotFound{}
}

/*UpdateAPINotFound handles this case with default header values.

API not found
*/
type UpdateAPINotFound struct {
	Payload *models.Error
}

func (o *UpdateAPINotFound) Error() string {
	return fmt.Sprintf("[PUT /{api}][%d] updateApiNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAPINotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIInternalServerError creates a UpdateAPIInternalServerError with default headers values
func NewUpdateAPIInternalServerError() *UpdateAPIInternalServerError {
	return &UpdateAPIInternalServerError{}
}

/*UpdateAPIInternalServerError handles this case with default header values.

Internal error
*/
type UpdateAPIInternalServerError struct {
	Payload *models.Error
}

func (o *UpdateAPIInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /{api}][%d] updateApiInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAPIInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
