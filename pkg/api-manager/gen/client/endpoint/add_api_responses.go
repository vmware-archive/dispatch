///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api-manager/gen/models"
)

// AddAPIReader is a Reader for the AddAPI structure.
type AddAPIReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddAPIReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddAPIOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddAPIBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddAPIUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAddAPIInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddAPIOK creates a AddAPIOK with default headers values
func NewAddAPIOK() *AddAPIOK {
	return &AddAPIOK{}
}

/*AddAPIOK handles this case with default header values.

API created
*/
type AddAPIOK struct {
	Payload *models.API
}

func (o *AddAPIOK) Error() string {
	return fmt.Sprintf("[POST /][%d] addApiOK  %+v", 200, o.Payload)
}

func (o *AddAPIOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.API)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAPIBadRequest creates a AddAPIBadRequest with default headers values
func NewAddAPIBadRequest() *AddAPIBadRequest {
	return &AddAPIBadRequest{}
}

/*AddAPIBadRequest handles this case with default header values.

Invalid Input
*/
type AddAPIBadRequest struct {
	Payload *models.Error
}

func (o *AddAPIBadRequest) Error() string {
	return fmt.Sprintf("[POST /][%d] addApiBadRequest  %+v", 400, o.Payload)
}

func (o *AddAPIBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAPIUnauthorized creates a AddAPIUnauthorized with default headers values
func NewAddAPIUnauthorized() *AddAPIUnauthorized {
	return &AddAPIUnauthorized{}
}

/*AddAPIUnauthorized handles this case with default header values.

Unauthorized Request
*/
type AddAPIUnauthorized struct {
	Payload *models.Error
}

func (o *AddAPIUnauthorized) Error() string {
	return fmt.Sprintf("[POST /][%d] addApiUnauthorized  %+v", 401, o.Payload)
}

func (o *AddAPIUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAPIInternalServerError creates a AddAPIInternalServerError with default headers values
func NewAddAPIInternalServerError() *AddAPIInternalServerError {
	return &AddAPIInternalServerError{}
}

/*AddAPIInternalServerError handles this case with default header values.

Internal Error
*/
type AddAPIInternalServerError struct {
	Payload *models.Error
}

func (o *AddAPIInternalServerError) Error() string {
	return fmt.Sprintf("[POST /][%d] addApiInternalServerError  %+v", 500, o.Payload)
}

func (o *AddAPIInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
