///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DriverType driver type
// swagger:model DriverType

type DriverType struct {

	// config
	Config DriverTypeConfig `json:"config"`

	// created time
	// Read Only: true
	CreatedTime int64 `json:"created-time,omitempty"`

	// id
	// Read Only: true
	ID strfmt.UUID `json:"id,omitempty"`

	// image
	// Required: true
	Image *string `json:"image"`

	// mode
	Mode *string `json:"mode,omitempty"`

	// modified time
	// Read Only: true
	ModifiedTime int64 `json:"modified-time,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// status
	// Read Only: true
	Status Status `json:"status,omitempty"`

	// tags
	Tags DriverTypeTags `json:"tags"`
}

/* polymorph DriverType config false */

/* polymorph DriverType created-time false */

/* polymorph DriverType id false */

/* polymorph DriverType image false */

/* polymorph DriverType mode false */

/* polymorph DriverType modified-time false */

/* polymorph DriverType name false */

/* polymorph DriverType status false */

/* polymorph DriverType tags false */

// Validate validates this driver type
func (m *DriverType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DriverType) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

var driverTypeTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","pipe","grpc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		driverTypeTypeModePropEnum = append(driverTypeTypeModePropEnum, v)
	}
}

const (
	// DriverTypeModeHTTP captures enum value "http"
	DriverTypeModeHTTP string = "http"
	// DriverTypeModePipe captures enum value "pipe"
	DriverTypeModePipe string = "pipe"
	// DriverTypeModeGrpc captures enum value "grpc"
	DriverTypeModeGrpc string = "grpc"
)

// prop value enum
func (m *DriverType) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, driverTypeTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DriverType) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *DriverType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DriverType) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DriverType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DriverType) UnmarshalBinary(b []byte) error {
	var res DriverType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
