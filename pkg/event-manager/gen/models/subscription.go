///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscription subscription
// swagger:model Subscription

type Subscription struct {

	// created time
	// Read Only: true
	CreatedTime int64 `json:"createdTime,omitempty"`

	// id
	// Read Only: true
	ID strfmt.UUID `json:"id,omitempty"`

	// modified time
	// Read Only: true
	ModifiedTime int64 `json:"modifiedTime,omitempty"`

	// name
	// Pattern: ^[\w\d\-]+$
	Name string `json:"name,omitempty"`

	// secrets
	Secrets []string `json:"secrets"`

	// status
	// Read Only: true
	Status Status `json:"status,omitempty"`

	// subscriber
	// Required: true
	Subscriber *Subscriber `json:"subscriber"`

	// tags
	Tags SubscriptionTags `json:"tags"`

	// topic
	// Required: true
	// Pattern: ^[\w\d\-\.]+$
	Topic *string `json:"topic"`
}

/* polymorph Subscription createdTime false */

/* polymorph Subscription id false */

/* polymorph Subscription modifiedTime false */

/* polymorph Subscription name false */

/* polymorph Subscription secrets false */

/* polymorph Subscription status false */

/* polymorph Subscription subscriber false */

/* polymorph Subscription tags false */

/* polymorph Subscription topic false */

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSecrets(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubscriber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTopic(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[\w\d\-]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateSecrets(formats strfmt.Registry) error {

	if swag.IsZero(m.Secrets) { // not required
		return nil
	}

	return nil
}

func (m *Subscription) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *Subscription) validateSubscriber(formats strfmt.Registry) error {

	if err := validate.Required("subscriber", "body", m.Subscriber); err != nil {
		return err
	}

	if m.Subscriber != nil {

		if err := m.Subscriber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscriber")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateTopic(formats strfmt.Registry) error {

	if err := validate.Required("topic", "body", m.Topic); err != nil {
		return err
	}

	if err := validate.Pattern("topic", "body", string(*m.Topic), `^[\w\d\-\.]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscription) UnmarshalBinary(b []byte) error {
	var res Subscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
