///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/event-manager/gen/models"
)

// DeleteSubscriptionReader is a Reader for the DeleteSubscription structure.
type DeleteSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteSubscriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteSubscriptionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteSubscriptionOK creates a DeleteSubscriptionOK with default headers values
func NewDeleteSubscriptionOK() *DeleteSubscriptionOK {
	return &DeleteSubscriptionOK{}
}

/*DeleteSubscriptionOK handles this case with default header values.

successful operation
*/
type DeleteSubscriptionOK struct {
	Payload *models.Subscription
}

func (o *DeleteSubscriptionOK) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions/{subscriptionName}][%d] deleteSubscriptionOK  %+v", 200, o.Payload)
}

func (o *DeleteSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Subscription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionBadRequest creates a DeleteSubscriptionBadRequest with default headers values
func NewDeleteSubscriptionBadRequest() *DeleteSubscriptionBadRequest {
	return &DeleteSubscriptionBadRequest{}
}

/*DeleteSubscriptionBadRequest handles this case with default header values.

Invalid ID supplied
*/
type DeleteSubscriptionBadRequest struct {
	Payload *models.Error
}

func (o *DeleteSubscriptionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions/{subscriptionName}][%d] deleteSubscriptionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionNotFound creates a DeleteSubscriptionNotFound with default headers values
func NewDeleteSubscriptionNotFound() *DeleteSubscriptionNotFound {
	return &DeleteSubscriptionNotFound{}
}

/*DeleteSubscriptionNotFound handles this case with default header values.

Subscription not found
*/
type DeleteSubscriptionNotFound struct {
	Payload *models.Error
}

func (o *DeleteSubscriptionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions/{subscriptionName}][%d] deleteSubscriptionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionInternalServerError creates a DeleteSubscriptionInternalServerError with default headers values
func NewDeleteSubscriptionInternalServerError() *DeleteSubscriptionInternalServerError {
	return &DeleteSubscriptionInternalServerError{}
}

/*DeleteSubscriptionInternalServerError handles this case with default header values.

Internal server error
*/
type DeleteSubscriptionInternalServerError struct {
	Payload *models.Error
}

func (o *DeleteSubscriptionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions/{subscriptionName}][%d] deleteSubscriptionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSubscriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionDefault creates a DeleteSubscriptionDefault with default headers values
func NewDeleteSubscriptionDefault(code int) *DeleteSubscriptionDefault {
	return &DeleteSubscriptionDefault{
		_statusCode: code,
	}
}

/*DeleteSubscriptionDefault handles this case with default header values.

Generic error response
*/
type DeleteSubscriptionDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete subscription default response
func (o *DeleteSubscriptionDefault) Code() int {
	return o._statusCode
}

func (o *DeleteSubscriptionDefault) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions/{subscriptionName}][%d] deleteSubscription default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteSubscriptionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
