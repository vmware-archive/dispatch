///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/event-manager/gen/models"
)

// EmitEventReader is a Reader for the EmitEvent structure.
type EmitEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EmitEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewEmitEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewEmitEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewEmitEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewEmitEventInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewEmitEventDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEmitEventOK creates a EmitEventOK with default headers values
func NewEmitEventOK() *EmitEventOK {
	return &EmitEventOK{}
}

/*EmitEventOK handles this case with default header values.

Event emitted
*/
type EmitEventOK struct {
	Payload *models.Emission
}

func (o *EmitEventOK) Error() string {
	return fmt.Sprintf("[POST /][%d] emitEventOK  %+v", 200, o.Payload)
}

func (o *EmitEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Emission)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmitEventBadRequest creates a EmitEventBadRequest with default headers values
func NewEmitEventBadRequest() *EmitEventBadRequest {
	return &EmitEventBadRequest{}
}

/*EmitEventBadRequest handles this case with default header values.

Invalid input
*/
type EmitEventBadRequest struct {
	Payload *models.Error
}

func (o *EmitEventBadRequest) Error() string {
	return fmt.Sprintf("[POST /][%d] emitEventBadRequest  %+v", 400, o.Payload)
}

func (o *EmitEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmitEventUnauthorized creates a EmitEventUnauthorized with default headers values
func NewEmitEventUnauthorized() *EmitEventUnauthorized {
	return &EmitEventUnauthorized{}
}

/*EmitEventUnauthorized handles this case with default header values.

Unauthorized Request
*/
type EmitEventUnauthorized struct {
	Payload *models.Error
}

func (o *EmitEventUnauthorized) Error() string {
	return fmt.Sprintf("[POST /][%d] emitEventUnauthorized  %+v", 401, o.Payload)
}

func (o *EmitEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmitEventInternalServerError creates a EmitEventInternalServerError with default headers values
func NewEmitEventInternalServerError() *EmitEventInternalServerError {
	return &EmitEventInternalServerError{}
}

/*EmitEventInternalServerError handles this case with default header values.

Internal server error
*/
type EmitEventInternalServerError struct {
	Payload *models.Error
}

func (o *EmitEventInternalServerError) Error() string {
	return fmt.Sprintf("[POST /][%d] emitEventInternalServerError  %+v", 500, o.Payload)
}

func (o *EmitEventInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmitEventDefault creates a EmitEventDefault with default headers values
func NewEmitEventDefault(code int) *EmitEventDefault {
	return &EmitEventDefault{
		_statusCode: code,
	}
}

/*EmitEventDefault handles this case with default header values.

Unknown error
*/
type EmitEventDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the emit event default response
func (o *EmitEventDefault) Code() int {
	return o._statusCode
}

func (o *EmitEventDefault) Error() string {
	return fmt.Sprintf("[POST /][%d] emitEvent default  %+v", o._statusCode, o.Payload)
}

func (o *EmitEventDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
