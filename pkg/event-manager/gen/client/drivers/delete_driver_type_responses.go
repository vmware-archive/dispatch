///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package drivers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/event-manager/gen/models"
)

// DeleteDriverTypeReader is a Reader for the DeleteDriverType structure.
type DeleteDriverTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDriverTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteDriverTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteDriverTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteDriverTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteDriverTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteDriverTypeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteDriverTypeOK creates a DeleteDriverTypeOK with default headers values
func NewDeleteDriverTypeOK() *DeleteDriverTypeOK {
	return &DeleteDriverTypeOK{}
}

/*DeleteDriverTypeOK handles this case with default header values.

successful operation
*/
type DeleteDriverTypeOK struct {
	Payload *models.DriverType
}

func (o *DeleteDriverTypeOK) Error() string {
	return fmt.Sprintf("[DELETE /drivertypes/{driverTypeName}][%d] deleteDriverTypeOK  %+v", 200, o.Payload)
}

func (o *DeleteDriverTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DriverType)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDriverTypeBadRequest creates a DeleteDriverTypeBadRequest with default headers values
func NewDeleteDriverTypeBadRequest() *DeleteDriverTypeBadRequest {
	return &DeleteDriverTypeBadRequest{}
}

/*DeleteDriverTypeBadRequest handles this case with default header values.

Invalid ID supplied
*/
type DeleteDriverTypeBadRequest struct {
	Payload *models.Error
}

func (o *DeleteDriverTypeBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /drivertypes/{driverTypeName}][%d] deleteDriverTypeBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteDriverTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDriverTypeNotFound creates a DeleteDriverTypeNotFound with default headers values
func NewDeleteDriverTypeNotFound() *DeleteDriverTypeNotFound {
	return &DeleteDriverTypeNotFound{}
}

/*DeleteDriverTypeNotFound handles this case with default header values.

Driver not found
*/
type DeleteDriverTypeNotFound struct {
	Payload *models.Error
}

func (o *DeleteDriverTypeNotFound) Error() string {
	return fmt.Sprintf("[DELETE /drivertypes/{driverTypeName}][%d] deleteDriverTypeNotFound  %+v", 404, o.Payload)
}

func (o *DeleteDriverTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDriverTypeInternalServerError creates a DeleteDriverTypeInternalServerError with default headers values
func NewDeleteDriverTypeInternalServerError() *DeleteDriverTypeInternalServerError {
	return &DeleteDriverTypeInternalServerError{}
}

/*DeleteDriverTypeInternalServerError handles this case with default header values.

Internal server error
*/
type DeleteDriverTypeInternalServerError struct {
	Payload *models.Error
}

func (o *DeleteDriverTypeInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /drivertypes/{driverTypeName}][%d] deleteDriverTypeInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteDriverTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDriverTypeDefault creates a DeleteDriverTypeDefault with default headers values
func NewDeleteDriverTypeDefault(code int) *DeleteDriverTypeDefault {
	return &DeleteDriverTypeDefault{
		_statusCode: code,
	}
}

/*DeleteDriverTypeDefault handles this case with default header values.

Generic error response
*/
type DeleteDriverTypeDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete driver type default response
func (o *DeleteDriverTypeDefault) Code() int {
	return o._statusCode
}

func (o *DeleteDriverTypeDefault) Error() string {
	return fmt.Sprintf("[DELETE /drivertypes/{driverTypeName}][%d] deleteDriverType default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteDriverTypeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
