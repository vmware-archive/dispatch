///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package drivers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/dispatch/pkg/event-manager/gen/models"
)

// UpdateDriverTypeReader is a Reader for the UpdateDriverType structure.
type UpdateDriverTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDriverTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateDriverTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateDriverTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateDriverTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateDriverTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateDriverTypeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateDriverTypeOK creates a UpdateDriverTypeOK with default headers values
func NewUpdateDriverTypeOK() *UpdateDriverTypeOK {
	return &UpdateDriverTypeOK{}
}

/*UpdateDriverTypeOK handles this case with default header values.

Successful operation
*/
type UpdateDriverTypeOK struct {
	Payload *models.DriverType
}

func (o *UpdateDriverTypeOK) Error() string {
	return fmt.Sprintf("[PUT /drivertypes/{driverTypeName}][%d] updateDriverTypeOK  %+v", 200, o.Payload)
}

func (o *UpdateDriverTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DriverType)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDriverTypeBadRequest creates a UpdateDriverTypeBadRequest with default headers values
func NewUpdateDriverTypeBadRequest() *UpdateDriverTypeBadRequest {
	return &UpdateDriverTypeBadRequest{}
}

/*UpdateDriverTypeBadRequest handles this case with default header values.

Invalid Name supplied
*/
type UpdateDriverTypeBadRequest struct {
	Payload *models.Error
}

func (o *UpdateDriverTypeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /drivertypes/{driverTypeName}][%d] updateDriverTypeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDriverTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDriverTypeNotFound creates a UpdateDriverTypeNotFound with default headers values
func NewUpdateDriverTypeNotFound() *UpdateDriverTypeNotFound {
	return &UpdateDriverTypeNotFound{}
}

/*UpdateDriverTypeNotFound handles this case with default header values.

DriverType not found
*/
type UpdateDriverTypeNotFound struct {
	Payload *models.Error
}

func (o *UpdateDriverTypeNotFound) Error() string {
	return fmt.Sprintf("[PUT /drivertypes/{driverTypeName}][%d] updateDriverTypeNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDriverTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDriverTypeInternalServerError creates a UpdateDriverTypeInternalServerError with default headers values
func NewUpdateDriverTypeInternalServerError() *UpdateDriverTypeInternalServerError {
	return &UpdateDriverTypeInternalServerError{}
}

/*UpdateDriverTypeInternalServerError handles this case with default header values.

Internal server error
*/
type UpdateDriverTypeInternalServerError struct {
	Payload *models.Error
}

func (o *UpdateDriverTypeInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /drivertypes/{driverTypeName}][%d] updateDriverTypeInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDriverTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDriverTypeDefault creates a UpdateDriverTypeDefault with default headers values
func NewUpdateDriverTypeDefault(code int) *UpdateDriverTypeDefault {
	return &UpdateDriverTypeDefault{
		_statusCode: code,
	}
}

/*UpdateDriverTypeDefault handles this case with default header values.

Unknown error
*/
type UpdateDriverTypeDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the update driver type default response
func (o *UpdateDriverTypeDefault) Code() int {
	return o._statusCode
}

func (o *UpdateDriverTypeDefault) Error() string {
	return fmt.Sprintf("[PUT /drivertypes/{driverTypeName}][%d] updateDriverType default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateDriverTypeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
