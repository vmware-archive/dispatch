///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package drivers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new drivers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for drivers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddDriver creates a new driver
*/
func (a *Client) AddDriver(params *AddDriverParams, authInfo runtime.ClientAuthInfoWriter) (*AddDriverCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDriver",
		Method:             "POST",
		PathPattern:        "/drivers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddDriverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDriverCreated), nil

}

/*
DeleteDriver deletes a driver
*/
func (a *Client) DeleteDriver(params *DeleteDriverParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDriver",
		Method:             "DELETE",
		PathPattern:        "/drivers/{driverName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDriverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDriverOK), nil

}

/*
GetDriver finds driver by name

Returns a single driver
*/
func (a *Client) GetDriver(params *GetDriverParams, authInfo runtime.ClientAuthInfoWriter) (*GetDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDriver",
		Method:             "GET",
		PathPattern:        "/drivers/{driverName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDriverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriverOK), nil

}

/*
GetDrivers lists all existing drivers
*/
func (a *Client) GetDrivers(params *GetDriversParams, authInfo runtime.ClientAuthInfoWriter) (*GetDriversOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriversParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDrivers",
		Method:             "GET",
		PathPattern:        "/drivers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDriversReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriversOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
