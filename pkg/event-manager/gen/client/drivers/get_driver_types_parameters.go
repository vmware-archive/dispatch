///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package drivers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDriverTypesParams creates a new GetDriverTypesParams object
// with the default values initialized.
func NewGetDriverTypesParams() *GetDriverTypesParams {
	var ()
	return &GetDriverTypesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDriverTypesParamsWithTimeout creates a new GetDriverTypesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDriverTypesParamsWithTimeout(timeout time.Duration) *GetDriverTypesParams {
	var ()
	return &GetDriverTypesParams{

		timeout: timeout,
	}
}

// NewGetDriverTypesParamsWithContext creates a new GetDriverTypesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDriverTypesParamsWithContext(ctx context.Context) *GetDriverTypesParams {
	var ()
	return &GetDriverTypesParams{

		Context: ctx,
	}
}

// NewGetDriverTypesParamsWithHTTPClient creates a new GetDriverTypesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDriverTypesParamsWithHTTPClient(client *http.Client) *GetDriverTypesParams {
	var ()
	return &GetDriverTypesParams{
		HTTPClient: client,
	}
}

/*GetDriverTypesParams contains all the parameters to send to the API endpoint
for the get driver types operation typically these are written to a http.Request
*/
type GetDriverTypesParams struct {

	/*XDISPATCHORGID*/
	XDISPATCHORGID string
	/*Tags
	  Filter based on tags

	*/
	Tags []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get driver types params
func (o *GetDriverTypesParams) WithTimeout(timeout time.Duration) *GetDriverTypesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get driver types params
func (o *GetDriverTypesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get driver types params
func (o *GetDriverTypesParams) WithContext(ctx context.Context) *GetDriverTypesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get driver types params
func (o *GetDriverTypesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get driver types params
func (o *GetDriverTypesParams) WithHTTPClient(client *http.Client) *GetDriverTypesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get driver types params
func (o *GetDriverTypesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXDISPATCHORGID adds the xDISPATCHORGID to the get driver types params
func (o *GetDriverTypesParams) WithXDISPATCHORGID(xDISPATCHORGID string) *GetDriverTypesParams {
	o.SetXDISPATCHORGID(xDISPATCHORGID)
	return o
}

// SetXDISPATCHORGID adds the xDISPATCHORGId to the get driver types params
func (o *GetDriverTypesParams) SetXDISPATCHORGID(xDISPATCHORGID string) {
	o.XDISPATCHORGID = xDISPATCHORGID
}

// WithTags adds the tags to the get driver types params
func (o *GetDriverTypesParams) WithTags(tags []string) *GetDriverTypesParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get driver types params
func (o *GetDriverTypesParams) SetTags(tags []string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *GetDriverTypesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-DISPATCH-ORG-ID
	if err := r.SetHeaderParam("X-DISPATCH-ORG-ID", o.XDISPATCHORGID); err != nil {
		return err
	}

	valuesTags := o.Tags

	joinedTags := swag.JoinByFormat(valuesTags, "multi")
	// query array param tags
	if err := r.SetQueryParam("tags", joinedTags...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
