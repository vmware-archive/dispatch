///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package drivers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDriverTypesParams creates a new GetDriverTypesParams object
// with the default values initialized.
func NewGetDriverTypesParams() *GetDriverTypesParams {
	var (
		xDispatchProjectDefault = string("default")
	)
	return &GetDriverTypesParams{
		XDispatchProject: &xDispatchProjectDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDriverTypesParamsWithTimeout creates a new GetDriverTypesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDriverTypesParamsWithTimeout(timeout time.Duration) *GetDriverTypesParams {
	var (
		xDispatchProjectDefault = string("default")
	)
	return &GetDriverTypesParams{
		XDispatchProject: &xDispatchProjectDefault,

		timeout: timeout,
	}
}

// NewGetDriverTypesParamsWithContext creates a new GetDriverTypesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDriverTypesParamsWithContext(ctx context.Context) *GetDriverTypesParams {
	var (
		xDispatchProjectDefault = string("default")
	)
	return &GetDriverTypesParams{
		XDispatchProject: &xDispatchProjectDefault,

		Context: ctx,
	}
}

// NewGetDriverTypesParamsWithHTTPClient creates a new GetDriverTypesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDriverTypesParamsWithHTTPClient(client *http.Client) *GetDriverTypesParams {
	var (
		xDispatchProjectDefault = string("default")
	)
	return &GetDriverTypesParams{
		XDispatchProject: &xDispatchProjectDefault,
		HTTPClient:       client,
	}
}

/*GetDriverTypesParams contains all the parameters to send to the API endpoint
for the get driver types operation typically these are written to a http.Request
*/
type GetDriverTypesParams struct {

	/*XDispatchOrg*/
	XDispatchOrg string
	/*XDispatchProject*/
	XDispatchProject *string
	/*Tags
	  Filter based on tags

	*/
	Tags []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get driver types params
func (o *GetDriverTypesParams) WithTimeout(timeout time.Duration) *GetDriverTypesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get driver types params
func (o *GetDriverTypesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get driver types params
func (o *GetDriverTypesParams) WithContext(ctx context.Context) *GetDriverTypesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get driver types params
func (o *GetDriverTypesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get driver types params
func (o *GetDriverTypesParams) WithHTTPClient(client *http.Client) *GetDriverTypesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get driver types params
func (o *GetDriverTypesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXDispatchOrg adds the xDispatchOrg to the get driver types params
func (o *GetDriverTypesParams) WithXDispatchOrg(xDispatchOrg string) *GetDriverTypesParams {
	o.SetXDispatchOrg(xDispatchOrg)
	return o
}

// SetXDispatchOrg adds the xDispatchOrg to the get driver types params
func (o *GetDriverTypesParams) SetXDispatchOrg(xDispatchOrg string) {
	o.XDispatchOrg = xDispatchOrg
}

// WithXDispatchProject adds the xDispatchProject to the get driver types params
func (o *GetDriverTypesParams) WithXDispatchProject(xDispatchProject *string) *GetDriverTypesParams {
	o.SetXDispatchProject(xDispatchProject)
	return o
}

// SetXDispatchProject adds the xDispatchProject to the get driver types params
func (o *GetDriverTypesParams) SetXDispatchProject(xDispatchProject *string) {
	o.XDispatchProject = xDispatchProject
}

// WithTags adds the tags to the get driver types params
func (o *GetDriverTypesParams) WithTags(tags []string) *GetDriverTypesParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get driver types params
func (o *GetDriverTypesParams) SetTags(tags []string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *GetDriverTypesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Dispatch-Org
	if err := r.SetHeaderParam("X-Dispatch-Org", o.XDispatchOrg); err != nil {
		return err
	}

	if o.XDispatchProject != nil {

		// header param X-Dispatch-Project
		if err := r.SetHeaderParam("X-Dispatch-Project", *o.XDispatchProject); err != nil {
			return err
		}

	}

	valuesTags := o.Tags

	joinedTags := swag.JoinByFormat(valuesTags, "multi")
	// query array param tags
	if err := r.SetQueryParam("tags", joinedTags...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
