///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package drivers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDriverHandlerFunc turns a function with the right signature into a get driver handler
type GetDriverHandlerFunc func(GetDriverParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDriverHandlerFunc) Handle(params GetDriverParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetDriverHandler interface for that can handle valid get driver params
type GetDriverHandler interface {
	Handle(GetDriverParams, interface{}) middleware.Responder
}

// NewGetDriver creates a new http.Handler for the get driver operation
func NewGetDriver(ctx *middleware.Context, handler GetDriverHandler) *GetDriver {
	return &GetDriver{Context: ctx, Handler: handler}
}

/*GetDriver swagger:route GET /drivers/{driverName} drivers getDriver

Find driver by Name

Returns a single driver

*/
type GetDriver struct {
	Context *middleware.Context
	Handler GetDriverHandler
}

func (o *GetDriver) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDriverParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
