///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package drivers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/dispatch/pkg/event-manager/gen/models"
)

// GetDriversOKCode is the HTTP code returned for type GetDriversOK
const GetDriversOKCode int = 200

/*GetDriversOK Successful operation

swagger:response getDriversOK
*/
type GetDriversOK struct {

	/*
	  In: Body
	*/
	Payload models.GetDriversOKBody `json:"body,omitempty"`
}

// NewGetDriversOK creates GetDriversOK with default headers values
func NewGetDriversOK() *GetDriversOK {
	return &GetDriversOK{}
}

// WithPayload adds the payload to the get drivers o k response
func (o *GetDriversOK) WithPayload(payload models.GetDriversOKBody) *GetDriversOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get drivers o k response
func (o *GetDriversOK) SetPayload(payload models.GetDriversOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDriversOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.GetDriversOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetDriversInternalServerErrorCode is the HTTP code returned for type GetDriversInternalServerError
const GetDriversInternalServerErrorCode int = 500

/*GetDriversInternalServerError Internal server error

swagger:response getDriversInternalServerError
*/
type GetDriversInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetDriversInternalServerError creates GetDriversInternalServerError with default headers values
func NewGetDriversInternalServerError() *GetDriversInternalServerError {
	return &GetDriversInternalServerError{}
}

// WithPayload adds the payload to the get drivers internal server error response
func (o *GetDriversInternalServerError) WithPayload(payload *models.Error) *GetDriversInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get drivers internal server error response
func (o *GetDriversInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDriversInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetDriversDefault Unknown error

swagger:response getDriversDefault
*/
type GetDriversDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetDriversDefault creates GetDriversDefault with default headers values
func NewGetDriversDefault(code int) *GetDriversDefault {
	if code <= 0 {
		code = 500
	}

	return &GetDriversDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get drivers default response
func (o *GetDriversDefault) WithStatusCode(code int) *GetDriversDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get drivers default response
func (o *GetDriversDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get drivers default response
func (o *GetDriversDefault) WithPayload(payload *models.Error) *GetDriversDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get drivers default response
func (o *GetDriversDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDriversDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
