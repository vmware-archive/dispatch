///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "VMware Dispatch Event Manager\n",
    "title": "Event Manager",
    "contact": {
      "email": "dispatch@vmware.com"
    },
    "version": "1.0.0"
  },
  "basePath": "/v1/event",
  "paths": {
    "/": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "events"
        ],
        "summary": "Emit an event",
        "operationId": "emitEvent",
        "parameters": [
          {
            "description": "emission object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/Emission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event emitted",
            "schema": {
              "$ref": "./models.json#/definitions/Emission"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/orgIDParam"
        },
        {
          "$ref": "#/parameters/projectNameParam"
        }
      ]
    },
    "/drivers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "List all existing drivers",
        "operationId": "getDrivers",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models.json#/definitions/EventDriver"
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Create a new driver",
        "operationId": "addDriver",
        "parameters": [
          {
            "description": "driver object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/EventDriver"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Driver created",
            "schema": {
              "$ref": "./models.json#/definitions/EventDriver"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/orgIDParam"
        },
        {
          "$ref": "#/parameters/projectNameParam"
        }
      ]
    },
    "/drivers/{driverName}": {
      "get": {
        "description": "Returns a single driver",
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Find driver by Name",
        "operationId": "getDriver",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/EventDriver"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Updates a single driver",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Update driver by Name",
        "operationId": "updateDriver",
        "parameters": [
          {
            "description": "driver object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/EventDriver"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/EventDriver"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Deletes a driver",
        "operationId": "deleteDriver",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/EventDriver"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/orgIDParam"
        },
        {
          "$ref": "#/parameters/projectNameParam"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of the driver to work on",
          "name": "driverName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/drivertypes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "List all existing driver types",
        "operationId": "getDriverTypes",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models.json#/definitions/EventDriverType"
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Create a new driver type",
        "operationId": "addDriverType",
        "parameters": [
          {
            "description": "driver type object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/EventDriverType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Driver Type created",
            "schema": {
              "$ref": "./models.json#/definitions/EventDriverType"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/orgIDParam"
        },
        {
          "$ref": "#/parameters/projectNameParam"
        }
      ]
    },
    "/drivertypes/{driverTypeName}": {
      "get": {
        "description": "Returns a single driver type",
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Find driver type by Name",
        "operationId": "getDriverType",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/EventDriverType"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Updates a single driver type",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Update a driver type by Name",
        "operationId": "updateDriverType",
        "parameters": [
          {
            "description": "driver object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/EventDriverType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/EventDriverType"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "404": {
            "description": "DriverType not found",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Deletes a driver type",
        "operationId": "deleteDriverType",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/EventDriverType"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/orgIDParam"
        },
        {
          "$ref": "#/parameters/projectNameParam"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of the driver type to work on",
          "name": "driverTypeName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/subscriptions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "List all existing subscriptions",
        "operationId": "getSubscriptions",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models.json#/definitions/Subscription"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Add a new subscription",
        "operationId": "addSubscription",
        "parameters": [
          {
            "description": "subscription object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription created",
            "schema": {
              "$ref": "./models.json#/definitions/Subscription"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/orgIDParam"
        },
        {
          "$ref": "#/parameters/projectNameParam"
        }
      ]
    },
    "/subscriptions/{subscriptionName}": {
      "get": {
        "description": "Returns a single subscription",
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Find subscription by Name",
        "operationId": "getSubscription",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/Subscription"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "404": {
            "description": "Subscription not found",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Updates a single subscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Update subscription by Name",
        "operationId": "updateSubscription",
        "parameters": [
          {
            "description": "subscription object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/Subscription"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "404": {
            "description": "Subscription not found",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Deletes a subscription",
        "operationId": "deleteSubscription",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/Subscription"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "404": {
            "description": "Subscription not found",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/orgIDParam"
        },
        {
          "$ref": "#/parameters/projectNameParam"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of the subscription to work on",
          "name": "subscriptionName",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "parameters": {
    "orgIDParam": {
      "type": "string",
      "name": "X-Dispatch-Org",
      "in": "header",
      "required": true
    },
    "projectNameParam": {
      "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
      "type": "string",
      "default": "default",
      "name": "X-Dispatch-Project",
      "in": "header"
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "cookie": {
      "description": "use cookies for authentication, when the user already logged in",
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    }
  },
  "security": [
    {
      "cookie": []
    },
    {
      "bearer": []
    }
  ],
  "tags": [
    {
      "description": "Operations on subscriptions",
      "name": "subscriptions"
    },
    {
      "description": "Operations on events",
      "name": "events"
    },
    {
      "description": "Operations on event drivers",
      "name": "drivers"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "VMware Dispatch Event Manager\n",
    "title": "Event Manager",
    "contact": {
      "email": "dispatch@vmware.com"
    },
    "version": "1.0.0"
  },
  "basePath": "/v1/event",
  "paths": {
    "/": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "events"
        ],
        "summary": "Emit an event",
        "operationId": "emitEvent",
        "parameters": [
          {
            "description": "emission object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/emission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event emitted",
            "schema": {
              "$ref": "#/definitions/emission"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "X-Dispatch-Org",
          "in": "header",
          "required": true
        },
        {
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "type": "string",
          "default": "default",
          "name": "X-Dispatch-Project",
          "in": "header"
        }
      ]
    },
    "/drivers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "List all existing drivers",
        "operationId": "getDrivers",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eventDriver"
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Create a new driver",
        "operationId": "addDriver",
        "parameters": [
          {
            "description": "driver object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Driver created",
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "X-Dispatch-Org",
          "in": "header",
          "required": true
        },
        {
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "type": "string",
          "default": "default",
          "name": "X-Dispatch-Project",
          "in": "header"
        }
      ]
    },
    "/drivers/{driverName}": {
      "get": {
        "description": "Returns a single driver",
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Find driver by Name",
        "operationId": "getDriver",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "description": "Updates a single driver",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Update driver by Name",
        "operationId": "updateDriver",
        "parameters": [
          {
            "description": "driver object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Deletes a driver",
        "operationId": "deleteDriver",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "X-Dispatch-Org",
          "in": "header",
          "required": true
        },
        {
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "type": "string",
          "default": "default",
          "name": "X-Dispatch-Project",
          "in": "header"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of the driver to work on",
          "name": "driverName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/drivertypes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "List all existing driver types",
        "operationId": "getDriverTypes",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eventDriverType"
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Create a new driver type",
        "operationId": "addDriverType",
        "parameters": [
          {
            "description": "driver type object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Driver Type created",
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "X-Dispatch-Org",
          "in": "header",
          "required": true
        },
        {
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "type": "string",
          "default": "default",
          "name": "X-Dispatch-Project",
          "in": "header"
        }
      ]
    },
    "/drivertypes/{driverTypeName}": {
      "get": {
        "description": "Returns a single driver type",
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Find driver type by Name",
        "operationId": "getDriverType",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "description": "Updates a single driver type",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Update a driver type by Name",
        "operationId": "updateDriverType",
        "parameters": [
          {
            "description": "driver object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "DriverType not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Deletes a driver type",
        "operationId": "deleteDriverType",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "X-Dispatch-Org",
          "in": "header",
          "required": true
        },
        {
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "type": "string",
          "default": "default",
          "name": "X-Dispatch-Project",
          "in": "header"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of the driver type to work on",
          "name": "driverTypeName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/subscriptions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "List all existing subscriptions",
        "operationId": "getSubscriptions",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/subscription"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Add a new subscription",
        "operationId": "addSubscription",
        "parameters": [
          {
            "description": "subscription object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription created",
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "X-Dispatch-Org",
          "in": "header",
          "required": true
        },
        {
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "type": "string",
          "default": "default",
          "name": "X-Dispatch-Project",
          "in": "header"
        }
      ]
    },
    "/subscriptions/{subscriptionName}": {
      "get": {
        "description": "Returns a single subscription",
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Find subscription by Name",
        "operationId": "getSubscription",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Subscription not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "description": "Updates a single subscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Update subscription by Name",
        "operationId": "updateSubscription",
        "parameters": [
          {
            "description": "subscription object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Subscription not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Deletes a subscription",
        "operationId": "deleteSubscription",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Subscription not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "X-Dispatch-Org",
          "in": "header",
          "required": true
        },
        {
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "type": "string",
          "default": "default",
          "name": "X-Dispatch-Project",
          "in": "header"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of the subscription to work on",
          "name": "subscriptionName",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "emission": {
      "description": "Emission emission",
      "allOf": [
        {
          "$ref": "#/definitions/emissionAllOf0"
        },
        {
          "$ref": "#/definitions/emissionAllOf1"
        }
      ],
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "emissionAllOf0": {
      "description": "CloudEvent cloud event, implemented based on: https://github.com/cloudevents/spec/blob/a12b6b618916c89bfa5595fc76732f07f89219b5/spec.md",
      "type": "object",
      "required": [
        "eventType",
        "cloudEventsVersion",
        "source",
        "eventID"
      ],
      "properties": {
        "cloudEventsVersion": {
          "description": "cloud events version",
          "type": "string",
          "x-go-name": "CloudEventsVersion"
        },
        "contentType": {
          "description": "content type",
          "type": "string",
          "x-go-name": "ContentType"
        },
        "data": {
          "description": "It implements Marshaler and Unmarshaler and can\nbe used to delay JSON decoding or precompute a JSON encoding.",
          "type": "array",
          "title": "RawMessage is a raw encoded JSON value.",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-package": "encoding/json"
        },
        "eventID": {
          "description": "event id",
          "type": "string",
          "x-go-name": "EventID"
        },
        "eventTime": {
          "description": "event time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EventTime"
        },
        "eventType": {
          "description": "event type",
          "type": "string",
          "maxLength": 128,
          "pattern": "^[\\w\\d\\-\\.]+$",
          "x-go-name": "EventType"
        },
        "eventTypeVersion": {
          "description": "event type version",
          "type": "string",
          "x-go-name": "EventTypeVersion"
        },
        "extensions": {
          "description": "extensions",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Extensions"
        },
        "schemaURL": {
          "description": "schema url",
          "type": "string",
          "x-go-name": "SchemaURL"
        },
        "source": {
          "description": "source",
          "type": "string",
          "x-go-name": "Source"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "emissionAllOf1": {
      "type": "object",
      "properties": {
        "emitted-time": {
          "description": "emitted time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "EmittedTime",
          "readOnly": true
        },
        "id": {
          "description": "id",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID",
          "readOnly": true
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/emissionAllOf1TagsItems"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-gen-location": "models"
    },
    "emissionAllOf1TagsItems": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "error": {
      "description": "Error error",
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "message": {
          "description": "message",
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriver": {
      "description": "EventDriver driver",
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "config": {
          "description": "config",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventDriverConfigItems"
          },
          "x-go-name": "Config"
        },
        "created-time": {
          "description": "created time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedTime",
          "readOnly": true
        },
        "expose": {
          "description": "expose",
          "type": "boolean",
          "x-go-name": "Expose",
          "readOnly": true
        },
        "id": {
          "description": "id",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID",
          "readOnly": true
        },
        "kind": {
          "description": "kind",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Kind",
          "readOnly": true
        },
        "modified-time": {
          "description": "modified time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ModifiedTime",
          "readOnly": true
        },
        "name": {
          "description": "name",
          "type": "string",
          "pattern": "^[a-z0-9][a-z0-9\\-]*$",
          "x-go-name": "Name"
        },
        "reason": {
          "description": "reason",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Reason"
        },
        "secrets": {
          "description": "secrets",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Secrets"
        },
        "status": {
          "description": "Status status",
          "type": "string",
          "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventDriverTagsItems"
          },
          "x-go-name": "Tags"
        },
        "type": {
          "description": "type",
          "type": "string",
          "maxLength": 32,
          "x-go-name": "Type"
        },
        "url": {
          "description": "url",
          "type": "string",
          "x-go-name": "URL",
          "readOnly": true
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverConfigItems": {
      "description": "Config config",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverTagsItems": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverType": {
      "description": "EventDriverType driver type",
      "type": "object",
      "required": [
        "image",
        "name"
      ],
      "properties": {
        "config": {
          "description": "config",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventDriverTypeConfigItems"
          },
          "x-go-name": "Config"
        },
        "created-time": {
          "description": "created time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedTime",
          "readOnly": true
        },
        "expose": {
          "description": "expose",
          "type": "boolean",
          "x-go-name": "Expose"
        },
        "id": {
          "description": "id",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID",
          "readOnly": true
        },
        "image": {
          "description": "image",
          "type": "string",
          "x-go-name": "Image"
        },
        "kind": {
          "description": "kind",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Kind",
          "readOnly": true
        },
        "meta": {
          "$ref": "#/definitions/eventDriverTypeMeta"
        },
        "modified-time": {
          "description": "modified time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ModifiedTime",
          "readOnly": true
        },
        "name": {
          "description": "name",
          "type": "string",
          "maxLength": 32,
          "pattern": "^[\\w\\d][\\w\\d\\-]*$",
          "x-go-name": "Name"
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventDriverTypeTagsItems"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverTypeConfigItems": {
      "description": "Config config",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverTypeMeta": {
      "description": "Meta holds common metadata for API objects",
      "type": "object",
      "required": [
        "name",
        "project",
        "org"
      ],
      "properties": {
        "name": {
          "description": "Name",
          "type": "string",
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "x-go-name": "Name"
        },
        "org": {
          "description": "Org",
          "type": "string",
          "default": "default",
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "x-go-name": "Org"
        },
        "project": {
          "description": "Project",
          "type": "string",
          "default": "default",
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "x-go-name": "Project"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverTypeTagsItems": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "subscription": {
      "description": "Subscription subscription",
      "type": "object",
      "required": [
        "eventType",
        "function",
        "name"
      ],
      "properties": {
        "createdTime": {
          "description": "created time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedTime",
          "readOnly": true
        },
        "eventType": {
          "description": "event type",
          "type": "string",
          "maxLength": 128,
          "pattern": "^[\\w\\d\\-\\.]+$",
          "x-go-name": "EventType"
        },
        "function": {
          "description": "function",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Function"
        },
        "id": {
          "description": "id",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID",
          "readOnly": true
        },
        "kind": {
          "description": "kind",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Kind",
          "readOnly": true
        },
        "modifiedTime": {
          "description": "modified time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ModifiedTime",
          "readOnly": true
        },
        "name": {
          "description": "name",
          "type": "string",
          "pattern": "^[\\w\\d][\\w\\d\\-]*$",
          "x-go-name": "Name"
        },
        "secrets": {
          "description": "secrets",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Secrets"
        },
        "status": {
          "description": "Status status",
          "type": "string",
          "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/subscriptionTagsItems"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "subscriptionTagsItems": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    }
  },
  "parameters": {
    "orgIDParam": {
      "type": "string",
      "name": "X-Dispatch-Org",
      "in": "header",
      "required": true
    },
    "projectNameParam": {
      "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
      "type": "string",
      "default": "default",
      "name": "X-Dispatch-Project",
      "in": "header"
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "cookie": {
      "description": "use cookies for authentication, when the user already logged in",
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    }
  },
  "security": [
    {
      "cookie": []
    },
    {
      "bearer": []
    }
  ],
  "tags": [
    {
      "description": "Operations on subscriptions",
      "name": "subscriptions"
    },
    {
      "description": "Operations on events",
      "name": "events"
    },
    {
      "description": "Operations on event drivers",
      "name": "drivers"
    }
  ]
}`))
}
