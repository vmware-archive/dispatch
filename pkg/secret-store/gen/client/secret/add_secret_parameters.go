///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/secret-store/gen/models"
)

// NewAddSecretParams creates a new AddSecretParams object
// with the default values initialized.
func NewAddSecretParams() *AddSecretParams {
	var ()
	return &AddSecretParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddSecretParamsWithTimeout creates a new AddSecretParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddSecretParamsWithTimeout(timeout time.Duration) *AddSecretParams {
	var ()
	return &AddSecretParams{

		timeout: timeout,
	}
}

// NewAddSecretParamsWithContext creates a new AddSecretParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddSecretParamsWithContext(ctx context.Context) *AddSecretParams {
	var ()
	return &AddSecretParams{

		Context: ctx,
	}
}

// NewAddSecretParamsWithHTTPClient creates a new AddSecretParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddSecretParamsWithHTTPClient(client *http.Client) *AddSecretParams {
	var ()
	return &AddSecretParams{
		HTTPClient: client,
	}
}

/*AddSecretParams contains all the parameters to send to the API endpoint
for the add secret operation typically these are written to a http.Request
*/
type AddSecretParams struct {

	/*Secret*/
	Secret *models.Secret

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add secret params
func (o *AddSecretParams) WithTimeout(timeout time.Duration) *AddSecretParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add secret params
func (o *AddSecretParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add secret params
func (o *AddSecretParams) WithContext(ctx context.Context) *AddSecretParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add secret params
func (o *AddSecretParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add secret params
func (o *AddSecretParams) WithHTTPClient(client *http.Client) *AddSecretParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add secret params
func (o *AddSecretParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSecret adds the secret to the add secret params
func (o *AddSecretParams) WithSecret(secret *models.Secret) *AddSecretParams {
	o.SetSecret(secret)
	return o
}

// SetSecret adds the secret to the add secret params
func (o *AddSecretParams) SetSecret(secret *models.Secret) {
	o.Secret = secret
}

// WriteToRequest writes these params to a swagger request
func (o *AddSecretParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Secret == nil {
		o.Secret = new(models.Secret)
	}

	if err := r.SetBodyParam(o.Secret); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
