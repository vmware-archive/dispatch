// Code generated by mockery v1.0.0

package mocks

import context "context"
import entitystore "github.com/vmware/dispatch/pkg/entity-store"
import mock "github.com/stretchr/testify/mock"

// EntityStore is an autogenerated mock type for the EntityStore type
type EntityStore struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, entity
func (_m *EntityStore) Add(ctx context.Context, entity entitystore.Entity) (string, error) {
	ret := _m.Called(ctx, entity)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, entitystore.Entity) string); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entitystore.Entity) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, organizationID, id, entity
func (_m *EntityStore) Delete(ctx context.Context, organizationID string, id string, entity entitystore.Entity) error {
	ret := _m.Called(ctx, organizationID, id, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, entitystore.Entity) error); ok {
		r0 = rf(ctx, organizationID, id, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, organizationID, key, opts, entity
func (_m *EntityStore) Find(ctx context.Context, organizationID string, key string, opts entitystore.Options, entity entitystore.Entity) (bool, error) {
	ret := _m.Called(ctx, organizationID, key, opts, entity)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, entitystore.Options, entitystore.Entity) bool); ok {
		r0 = rf(ctx, organizationID, key, opts, entity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, entitystore.Options, entitystore.Entity) error); ok {
		r1 = rf(ctx, organizationID, key, opts, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, organizationID, key, opts, entity
func (_m *EntityStore) Get(ctx context.Context, organizationID string, key string, opts entitystore.Options, entity entitystore.Entity) error {
	ret := _m.Called(ctx, organizationID, key, opts, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, entitystore.Options, entitystore.Entity) error); ok {
		r0 = rf(ctx, organizationID, key, opts, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, organizationID, opts, entities
func (_m *EntityStore) List(ctx context.Context, organizationID string, opts entitystore.Options, entities interface{}) error {
	ret := _m.Called(ctx, organizationID, opts, entities)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entitystore.Options, interface{}) error); ok {
		r0 = rf(ctx, organizationID, opts, entities)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListOrgIDs provides a mock function with given fields: ctx
func (_m *EntityStore) ListOrgIDs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDelete provides a mock function with given fields: ctx, entity
func (_m *EntityStore) SoftDelete(ctx context.Context, entity entitystore.Entity) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entitystore.Entity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, lastRevision, entity
func (_m *EntityStore) Update(ctx context.Context, lastRevision uint64, entity entitystore.Entity) (int64, error) {
	ret := _m.Called(ctx, lastRevision, entity)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, uint64, entitystore.Entity) int64); ok {
		r0 = rf(ctx, lastRevision, entity)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, entitystore.Entity) error); ok {
		r1 = rf(ctx, lastRevision, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWithError provides a mock function with given fields: ctx, e, err
func (_m *EntityStore) UpdateWithError(ctx context.Context, e entitystore.Entity, err error) {
	_m.Called(ctx, e, err)
}
