///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "VMware Dispatch Endpoints\n",
    "title": "Endpoints",
    "contact": {
      "email": "dispatch@vmware.com"
    },
    "version": "1.0.0"
  },
  "basePath": "/v1/endpoint",
  "paths": {
    "/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "endpoint"
        ],
        "summary": "List all existing Endpoints",
        "operationId": "getEndpoints",
        "parameters": [
          {
            "type": "string",
            "description": "Filter based on function names",
            "name": "function",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models.json#/definitions/Endpoint"
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "endpoint"
        ],
        "summary": "Add a new Endpoint",
        "operationId": "addEndpoint",
        "parameters": [
          {
            "description": "Endpoint object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/Endpoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint created",
            "schema": {
              "$ref": "./models.json#/definitions/Endpoint"
            }
          },
          "400": {
            "description": "Invalid Input",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/orgIDParam"
        },
        {
          "$ref": "#/parameters/projectNameParam"
        }
      ]
    },
    "/{endpoint}": {
      "get": {
        "description": "get an Endpoint by name",
        "produces": [
          "application/json"
        ],
        "tags": [
          "endpoint"
        ],
        "summary": "Find Endpoint by name",
        "operationId": "getEndpoint",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/Endpoint"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "404": {
            "description": "Endpoint not found",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "endpoint"
        ],
        "summary": "Update an Endpoint",
        "operationId": "updateEndpoint",
        "parameters": [
          {
            "description": "Endpoint object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/Endpoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful update",
            "schema": {
              "$ref": "./models.json#/definitions/Endpoint"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "404": {
            "description": "Endpoint not found",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "endpoint"
        ],
        "summary": "Deletes an Endpoint",
        "operationId": "deleteEndpoint",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/Endpoint"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "404": {
            "description": "Endpoint not found",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "./models.json#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/orgIDParam"
        },
        {
          "$ref": "#/parameters/projectNameParam"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of Endpoint to work on",
          "name": "endpoint",
          "in": "path",
          "required": true
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        }
      ]
    }
  },
  "parameters": {
    "orgIDParam": {
      "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
      "type": "string",
      "default": "default",
      "name": "X-Dispatch-Org",
      "in": "header"
    },
    "projectNameParam": {
      "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
      "type": "string",
      "default": "default",
      "name": "X-Dispatch-Project",
      "in": "header"
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "cookie": {
      "description": "use cookies for authentication, when the user already logged in",
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    }
  },
  "security": [
    {
      "cookie": []
    },
    {
      "bearer": []
    }
  ],
  "tags": [
    {
      "description": "CRUD operations on Endpoints",
      "name": "endpoint"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "VMware Dispatch Endpoints\n",
    "title": "Endpoints",
    "contact": {
      "email": "dispatch@vmware.com"
    },
    "version": "1.0.0"
  },
  "basePath": "/v1/endpoint",
  "paths": {
    "/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "endpoint"
        ],
        "summary": "List all existing Endpoints",
        "operationId": "getEndpoints",
        "parameters": [
          {
            "type": "string",
            "description": "Filter based on function names",
            "name": "function",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/endpoint"
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "endpoint"
        ],
        "summary": "Add a new Endpoint",
        "operationId": "addEndpoint",
        "parameters": [
          {
            "description": "Endpoint object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint created",
            "schema": {
              "$ref": "#/definitions/endpoint"
            }
          },
          "400": {
            "description": "Invalid Input",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "type": "string",
          "default": "default",
          "name": "X-Dispatch-Org",
          "in": "header"
        },
        {
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "type": "string",
          "default": "default",
          "name": "X-Dispatch-Project",
          "in": "header"
        }
      ]
    },
    "/{endpoint}": {
      "get": {
        "description": "get an Endpoint by name",
        "produces": [
          "application/json"
        ],
        "tags": [
          "endpoint"
        ],
        "summary": "Find Endpoint by name",
        "operationId": "getEndpoint",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/endpoint"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Endpoint not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "endpoint"
        ],
        "summary": "Update an Endpoint",
        "operationId": "updateEndpoint",
        "parameters": [
          {
            "description": "Endpoint object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful update",
            "schema": {
              "$ref": "#/definitions/endpoint"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Endpoint not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "endpoint"
        ],
        "summary": "Deletes an Endpoint",
        "operationId": "deleteEndpoint",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/endpoint"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "access to this resource is forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Endpoint not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "type": "string",
          "default": "default",
          "name": "X-Dispatch-Org",
          "in": "header"
        },
        {
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "type": "string",
          "default": "default",
          "name": "X-Dispatch-Project",
          "in": "header"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of Endpoint to work on",
          "name": "endpoint",
          "in": "path",
          "required": true
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        }
      ]
    }
  },
  "definitions": {
    "endpoint": {
      "description": "Endpoint Endpoint",
      "type": "object",
      "required": [
        "name",
        "function"
      ],
      "properties": {
        "backingObject": {
          "description": "BackingObject",
          "type": "object",
          "x-go-name": "BackingObject",
          "readOnly": true
        },
        "cors": {
          "description": "enable Cross-Origin Resource Sharing (CORS)",
          "type": "boolean",
          "x-go-name": "Cors"
        },
        "createdTime": {
          "description": "CreatedTime",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedTime",
          "readOnly": true
        },
        "enabled": {
          "description": "a easy way to disable an Endpoint without deleting it.",
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "function": {
          "description": "the name of the function associated with",
          "type": "string",
          "x-go-name": "Function"
        },
        "hosts": {
          "description": "a list of domain names that point to the Endpoint",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Hosts"
        },
        "id": {
          "description": "ID",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID"
        },
        "kind": {
          "description": "Kind",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Kind",
          "readOnly": true
        },
        "methods": {
          "description": "a list of HTTP/S methods that point to the Endpoint",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Methods"
        },
        "modifiedTime": {
          "description": "ModifiedTime",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ModifiedTime",
          "readOnly": true
        },
        "name": {
          "description": "Name",
          "type": "string",
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "x-go-name": "Name"
        },
        "org": {
          "description": "Org",
          "type": "string",
          "default": "default",
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "x-go-name": "Org"
        },
        "project": {
          "description": "Project",
          "type": "string",
          "default": "default",
          "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
          "x-go-name": "Project"
        },
        "protocols": {
          "description": "a list of support protocols (i.e. http, https)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Protocols"
        },
        "status": {
          "description": "Status status",
          "type": "string",
          "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
        },
        "tags": {
          "description": "Tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/endpointTagsItems"
          },
          "x-go-name": "Tags"
        },
        "uris": {
          "description": "a list of URIs prefixes that point to the Endpoint",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Uris"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "endpointTagsItems": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "error": {
      "description": "Error error",
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "message": {
          "description": "message",
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    }
  },
  "parameters": {
    "orgIDParam": {
      "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
      "type": "string",
      "default": "default",
      "name": "X-Dispatch-Org",
      "in": "header"
    },
    "projectNameParam": {
      "pattern": "^[\\w\\d][\\w\\d\\-]*[\\w\\d]|[\\w\\d]+$",
      "type": "string",
      "default": "default",
      "name": "X-Dispatch-Project",
      "in": "header"
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "cookie": {
      "description": "use cookies for authentication, when the user already logged in",
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    }
  },
  "security": [
    {
      "cookie": []
    },
    {
      "bearer": []
    }
  ],
  "tags": [
    {
      "description": "CRUD operations on Endpoints",
      "name": "endpoint"
    }
  ]
}`))
}
