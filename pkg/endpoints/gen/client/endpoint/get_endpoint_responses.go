///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// GetEndpointReader is a Reader for the GetEndpoint structure.
type GetEndpointReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEndpointReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetEndpointOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetEndpointBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetEndpointUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetEndpointForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetEndpointNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetEndpointDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetEndpointOK creates a GetEndpointOK with default headers values
func NewGetEndpointOK() *GetEndpointOK {
	return &GetEndpointOK{}
}

/*GetEndpointOK handles this case with default header values.

Successful operation
*/
type GetEndpointOK struct {
	Payload *v1.Endpoint
}

func (o *GetEndpointOK) Error() string {
	return fmt.Sprintf("[GET /{endpoint}][%d] getEndpointOK  %+v", 200, o.Payload)
}

func (o *GetEndpointOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Endpoint)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEndpointBadRequest creates a GetEndpointBadRequest with default headers values
func NewGetEndpointBadRequest() *GetEndpointBadRequest {
	return &GetEndpointBadRequest{}
}

/*GetEndpointBadRequest handles this case with default header values.

Invalid Name supplied
*/
type GetEndpointBadRequest struct {
	Payload *v1.Error
}

func (o *GetEndpointBadRequest) Error() string {
	return fmt.Sprintf("[GET /{endpoint}][%d] getEndpointBadRequest  %+v", 400, o.Payload)
}

func (o *GetEndpointBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEndpointUnauthorized creates a GetEndpointUnauthorized with default headers values
func NewGetEndpointUnauthorized() *GetEndpointUnauthorized {
	return &GetEndpointUnauthorized{}
}

/*GetEndpointUnauthorized handles this case with default header values.

Unauthorized Request
*/
type GetEndpointUnauthorized struct {
	Payload *v1.Error
}

func (o *GetEndpointUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{endpoint}][%d] getEndpointUnauthorized  %+v", 401, o.Payload)
}

func (o *GetEndpointUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEndpointForbidden creates a GetEndpointForbidden with default headers values
func NewGetEndpointForbidden() *GetEndpointForbidden {
	return &GetEndpointForbidden{}
}

/*GetEndpointForbidden handles this case with default header values.

access to this resource is forbidden
*/
type GetEndpointForbidden struct {
	Payload *v1.Error
}

func (o *GetEndpointForbidden) Error() string {
	return fmt.Sprintf("[GET /{endpoint}][%d] getEndpointForbidden  %+v", 403, o.Payload)
}

func (o *GetEndpointForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEndpointNotFound creates a GetEndpointNotFound with default headers values
func NewGetEndpointNotFound() *GetEndpointNotFound {
	return &GetEndpointNotFound{}
}

/*GetEndpointNotFound handles this case with default header values.

Endpoint not found
*/
type GetEndpointNotFound struct {
	Payload *v1.Error
}

func (o *GetEndpointNotFound) Error() string {
	return fmt.Sprintf("[GET /{endpoint}][%d] getEndpointNotFound  %+v", 404, o.Payload)
}

func (o *GetEndpointNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEndpointDefault creates a GetEndpointDefault with default headers values
func NewGetEndpointDefault(code int) *GetEndpointDefault {
	return &GetEndpointDefault{
		_statusCode: code,
	}
}

/*GetEndpointDefault handles this case with default header values.

Unknown error
*/
type GetEndpointDefault struct {
	_statusCode int

	Payload *v1.Error
}

// Code gets the status code for the get endpoint default response
func (o *GetEndpointDefault) Code() int {
	return o._statusCode
}

func (o *GetEndpointDefault) Error() string {
	return fmt.Sprintf("[GET /{endpoint}][%d] getEndpoint default  %+v", o._statusCode, o.Payload)
}

func (o *GetEndpointDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
