///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// AddEndpointReader is a Reader for the AddEndpoint structure.
type AddEndpointReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddEndpointReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddEndpointOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddEndpointBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddEndpointUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddEndpointForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAddEndpointConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAddEndpointDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddEndpointOK creates a AddEndpointOK with default headers values
func NewAddEndpointOK() *AddEndpointOK {
	return &AddEndpointOK{}
}

/*AddEndpointOK handles this case with default header values.

Endpoint created
*/
type AddEndpointOK struct {
	Payload *v1.Endpoint
}

func (o *AddEndpointOK) Error() string {
	return fmt.Sprintf("[POST /][%d] addEndpointOK  %+v", 200, o.Payload)
}

func (o *AddEndpointOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Endpoint)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEndpointBadRequest creates a AddEndpointBadRequest with default headers values
func NewAddEndpointBadRequest() *AddEndpointBadRequest {
	return &AddEndpointBadRequest{}
}

/*AddEndpointBadRequest handles this case with default header values.

Invalid Input
*/
type AddEndpointBadRequest struct {
	Payload *v1.Error
}

func (o *AddEndpointBadRequest) Error() string {
	return fmt.Sprintf("[POST /][%d] addEndpointBadRequest  %+v", 400, o.Payload)
}

func (o *AddEndpointBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEndpointUnauthorized creates a AddEndpointUnauthorized with default headers values
func NewAddEndpointUnauthorized() *AddEndpointUnauthorized {
	return &AddEndpointUnauthorized{}
}

/*AddEndpointUnauthorized handles this case with default header values.

Unauthorized Request
*/
type AddEndpointUnauthorized struct {
	Payload *v1.Error
}

func (o *AddEndpointUnauthorized) Error() string {
	return fmt.Sprintf("[POST /][%d] addEndpointUnauthorized  %+v", 401, o.Payload)
}

func (o *AddEndpointUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEndpointForbidden creates a AddEndpointForbidden with default headers values
func NewAddEndpointForbidden() *AddEndpointForbidden {
	return &AddEndpointForbidden{}
}

/*AddEndpointForbidden handles this case with default header values.

access to this resource is forbidden
*/
type AddEndpointForbidden struct {
	Payload *v1.Error
}

func (o *AddEndpointForbidden) Error() string {
	return fmt.Sprintf("[POST /][%d] addEndpointForbidden  %+v", 403, o.Payload)
}

func (o *AddEndpointForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEndpointConflict creates a AddEndpointConflict with default headers values
func NewAddEndpointConflict() *AddEndpointConflict {
	return &AddEndpointConflict{}
}

/*AddEndpointConflict handles this case with default header values.

Already Exists
*/
type AddEndpointConflict struct {
	Payload *v1.Error
}

func (o *AddEndpointConflict) Error() string {
	return fmt.Sprintf("[POST /][%d] addEndpointConflict  %+v", 409, o.Payload)
}

func (o *AddEndpointConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEndpointDefault creates a AddEndpointDefault with default headers values
func NewAddEndpointDefault(code int) *AddEndpointDefault {
	return &AddEndpointDefault{
		_statusCode: code,
	}
}

/*AddEndpointDefault handles this case with default header values.

Unknown error
*/
type AddEndpointDefault struct {
	_statusCode int

	Payload *v1.Error
}

// Code gets the status code for the add endpoint default response
func (o *AddEndpointDefault) Code() int {
	return o._statusCode
}

func (o *AddEndpointDefault) Error() string {
	return fmt.Sprintf("[POST /][%d] addEndpoint default  %+v", o._statusCode, o.Payload)
}

func (o *AddEndpointDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
