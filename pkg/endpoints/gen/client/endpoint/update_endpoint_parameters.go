///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// NewUpdateEndpointParams creates a new UpdateEndpointParams object
// with the default values initialized.
func NewUpdateEndpointParams() *UpdateEndpointParams {
	var (
		xDispatchOrgDefault     = string("default")
		xDispatchProjectDefault = string("default")
	)
	return &UpdateEndpointParams{
		XDispatchOrg:     &xDispatchOrgDefault,
		XDispatchProject: &xDispatchProjectDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateEndpointParamsWithTimeout creates a new UpdateEndpointParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateEndpointParamsWithTimeout(timeout time.Duration) *UpdateEndpointParams {
	var (
		xDispatchOrgDefault     = string("default")
		xDispatchProjectDefault = string("default")
	)
	return &UpdateEndpointParams{
		XDispatchOrg:     &xDispatchOrgDefault,
		XDispatchProject: &xDispatchProjectDefault,

		timeout: timeout,
	}
}

// NewUpdateEndpointParamsWithContext creates a new UpdateEndpointParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateEndpointParamsWithContext(ctx context.Context) *UpdateEndpointParams {
	var (
		xDispatchOrgDefault     = string("default")
		xDispatchProjectDefault = string("default")
	)
	return &UpdateEndpointParams{
		XDispatchOrg:     &xDispatchOrgDefault,
		XDispatchProject: &xDispatchProjectDefault,

		Context: ctx,
	}
}

// NewUpdateEndpointParamsWithHTTPClient creates a new UpdateEndpointParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateEndpointParamsWithHTTPClient(client *http.Client) *UpdateEndpointParams {
	var (
		xDispatchOrgDefault     = string("default")
		xDispatchProjectDefault = string("default")
	)
	return &UpdateEndpointParams{
		XDispatchOrg:     &xDispatchOrgDefault,
		XDispatchProject: &xDispatchProjectDefault,
		HTTPClient:       client,
	}
}

/*UpdateEndpointParams contains all the parameters to send to the API endpoint
for the update endpoint operation typically these are written to a http.Request
*/
type UpdateEndpointParams struct {

	/*XDispatchOrg*/
	XDispatchOrg *string
	/*XDispatchProject*/
	XDispatchProject *string
	/*Body
	  Endpoint object

	*/
	Body *v1.Endpoint
	/*Endpoint
	  Name of Endpoint to work on

	*/
	Endpoint string
	/*Tags
	  Filter based on tags

	*/
	Tags []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update endpoint params
func (o *UpdateEndpointParams) WithTimeout(timeout time.Duration) *UpdateEndpointParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update endpoint params
func (o *UpdateEndpointParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update endpoint params
func (o *UpdateEndpointParams) WithContext(ctx context.Context) *UpdateEndpointParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update endpoint params
func (o *UpdateEndpointParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update endpoint params
func (o *UpdateEndpointParams) WithHTTPClient(client *http.Client) *UpdateEndpointParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update endpoint params
func (o *UpdateEndpointParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXDispatchOrg adds the xDispatchOrg to the update endpoint params
func (o *UpdateEndpointParams) WithXDispatchOrg(xDispatchOrg *string) *UpdateEndpointParams {
	o.SetXDispatchOrg(xDispatchOrg)
	return o
}

// SetXDispatchOrg adds the xDispatchOrg to the update endpoint params
func (o *UpdateEndpointParams) SetXDispatchOrg(xDispatchOrg *string) {
	o.XDispatchOrg = xDispatchOrg
}

// WithXDispatchProject adds the xDispatchProject to the update endpoint params
func (o *UpdateEndpointParams) WithXDispatchProject(xDispatchProject *string) *UpdateEndpointParams {
	o.SetXDispatchProject(xDispatchProject)
	return o
}

// SetXDispatchProject adds the xDispatchProject to the update endpoint params
func (o *UpdateEndpointParams) SetXDispatchProject(xDispatchProject *string) {
	o.XDispatchProject = xDispatchProject
}

// WithBody adds the body to the update endpoint params
func (o *UpdateEndpointParams) WithBody(body *v1.Endpoint) *UpdateEndpointParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update endpoint params
func (o *UpdateEndpointParams) SetBody(body *v1.Endpoint) {
	o.Body = body
}

// WithEndpoint adds the endpoint to the update endpoint params
func (o *UpdateEndpointParams) WithEndpoint(endpoint string) *UpdateEndpointParams {
	o.SetEndpoint(endpoint)
	return o
}

// SetEndpoint adds the endpoint to the update endpoint params
func (o *UpdateEndpointParams) SetEndpoint(endpoint string) {
	o.Endpoint = endpoint
}

// WithTags adds the tags to the update endpoint params
func (o *UpdateEndpointParams) WithTags(tags []string) *UpdateEndpointParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the update endpoint params
func (o *UpdateEndpointParams) SetTags(tags []string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateEndpointParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XDispatchOrg != nil {

		// header param X-Dispatch-Org
		if err := r.SetHeaderParam("X-Dispatch-Org", *o.XDispatchOrg); err != nil {
			return err
		}

	}

	if o.XDispatchProject != nil {

		// header param X-Dispatch-Project
		if err := r.SetHeaderParam("X-Dispatch-Project", *o.XDispatchProject); err != nil {
			return err
		}

	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param endpoint
	if err := r.SetPathParam("endpoint", o.Endpoint); err != nil {
		return err
	}

	valuesTags := o.Tags

	joinedTags := swag.JoinByFormat(valuesTags, "multi")
	// query array param tags
	if err := r.SetQueryParam("tags", joinedTags...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
