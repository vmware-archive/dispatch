///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// GetEndpointsReader is a Reader for the GetEndpoints structure.
type GetEndpointsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEndpointsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetEndpointsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetEndpointsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetEndpointsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetEndpointsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetEndpointsOK creates a GetEndpointsOK with default headers values
func NewGetEndpointsOK() *GetEndpointsOK {
	return &GetEndpointsOK{}
}

/*GetEndpointsOK handles this case with default header values.

Successful operation
*/
type GetEndpointsOK struct {
	Payload []*v1.Endpoint
}

func (o *GetEndpointsOK) Error() string {
	return fmt.Sprintf("[GET /][%d] getEndpointsOK  %+v", 200, o.Payload)
}

func (o *GetEndpointsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEndpointsUnauthorized creates a GetEndpointsUnauthorized with default headers values
func NewGetEndpointsUnauthorized() *GetEndpointsUnauthorized {
	return &GetEndpointsUnauthorized{}
}

/*GetEndpointsUnauthorized handles this case with default header values.

Unauthorized Request
*/
type GetEndpointsUnauthorized struct {
	Payload *v1.Error
}

func (o *GetEndpointsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /][%d] getEndpointsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetEndpointsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEndpointsForbidden creates a GetEndpointsForbidden with default headers values
func NewGetEndpointsForbidden() *GetEndpointsForbidden {
	return &GetEndpointsForbidden{}
}

/*GetEndpointsForbidden handles this case with default header values.

access to this resource is forbidden
*/
type GetEndpointsForbidden struct {
	Payload *v1.Error
}

func (o *GetEndpointsForbidden) Error() string {
	return fmt.Sprintf("[GET /][%d] getEndpointsForbidden  %+v", 403, o.Payload)
}

func (o *GetEndpointsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEndpointsDefault creates a GetEndpointsDefault with default headers values
func NewGetEndpointsDefault(code int) *GetEndpointsDefault {
	return &GetEndpointsDefault{
		_statusCode: code,
	}
}

/*GetEndpointsDefault handles this case with default header values.

Unexpected Error
*/
type GetEndpointsDefault struct {
	_statusCode int

	Payload *v1.Error
}

// Code gets the status code for the get endpoints default response
func (o *GetEndpointsDefault) Code() int {
	return o._statusCode
}

func (o *GetEndpointsDefault) Error() string {
	return fmt.Sprintf("[GET /][%d] getEndpoints default  %+v", o._statusCode, o.Payload)
}

func (o *GetEndpointsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
