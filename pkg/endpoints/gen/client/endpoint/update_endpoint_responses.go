///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// UpdateEndpointReader is a Reader for the UpdateEndpoint structure.
type UpdateEndpointReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEndpointReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateEndpointOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateEndpointBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateEndpointUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateEndpointForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateEndpointNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateEndpointDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateEndpointOK creates a UpdateEndpointOK with default headers values
func NewUpdateEndpointOK() *UpdateEndpointOK {
	return &UpdateEndpointOK{}
}

/*UpdateEndpointOK handles this case with default header values.

Successful update
*/
type UpdateEndpointOK struct {
	Payload *v1.Endpoint
}

func (o *UpdateEndpointOK) Error() string {
	return fmt.Sprintf("[PUT /{endpoint}][%d] updateEndpointOK  %+v", 200, o.Payload)
}

func (o *UpdateEndpointOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Endpoint)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEndpointBadRequest creates a UpdateEndpointBadRequest with default headers values
func NewUpdateEndpointBadRequest() *UpdateEndpointBadRequest {
	return &UpdateEndpointBadRequest{}
}

/*UpdateEndpointBadRequest handles this case with default header values.

Invalid input
*/
type UpdateEndpointBadRequest struct {
	Payload *v1.Error
}

func (o *UpdateEndpointBadRequest) Error() string {
	return fmt.Sprintf("[PUT /{endpoint}][%d] updateEndpointBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateEndpointBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEndpointUnauthorized creates a UpdateEndpointUnauthorized with default headers values
func NewUpdateEndpointUnauthorized() *UpdateEndpointUnauthorized {
	return &UpdateEndpointUnauthorized{}
}

/*UpdateEndpointUnauthorized handles this case with default header values.

Unauthorized Request
*/
type UpdateEndpointUnauthorized struct {
	Payload *v1.Error
}

func (o *UpdateEndpointUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /{endpoint}][%d] updateEndpointUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateEndpointUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEndpointForbidden creates a UpdateEndpointForbidden with default headers values
func NewUpdateEndpointForbidden() *UpdateEndpointForbidden {
	return &UpdateEndpointForbidden{}
}

/*UpdateEndpointForbidden handles this case with default header values.

access to this resource is forbidden
*/
type UpdateEndpointForbidden struct {
	Payload *v1.Error
}

func (o *UpdateEndpointForbidden) Error() string {
	return fmt.Sprintf("[PUT /{endpoint}][%d] updateEndpointForbidden  %+v", 403, o.Payload)
}

func (o *UpdateEndpointForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEndpointNotFound creates a UpdateEndpointNotFound with default headers values
func NewUpdateEndpointNotFound() *UpdateEndpointNotFound {
	return &UpdateEndpointNotFound{}
}

/*UpdateEndpointNotFound handles this case with default header values.

Endpoint not found
*/
type UpdateEndpointNotFound struct {
	Payload *v1.Error
}

func (o *UpdateEndpointNotFound) Error() string {
	return fmt.Sprintf("[PUT /{endpoint}][%d] updateEndpointNotFound  %+v", 404, o.Payload)
}

func (o *UpdateEndpointNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEndpointDefault creates a UpdateEndpointDefault with default headers values
func NewUpdateEndpointDefault(code int) *UpdateEndpointDefault {
	return &UpdateEndpointDefault{
		_statusCode: code,
	}
}

/*UpdateEndpointDefault handles this case with default header values.

Unknown error
*/
type UpdateEndpointDefault struct {
	_statusCode int

	Payload *v1.Error
}

// Code gets the status code for the update endpoint default response
func (o *UpdateEndpointDefault) Code() int {
	return o._statusCode
}

func (o *UpdateEndpointDefault) Error() string {
	return fmt.Sprintf("[PUT /{endpoint}][%d] updateEndpoint default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateEndpointDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
