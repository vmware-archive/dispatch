///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/dispatch/pkg/image-manager/gen/models"
)

// GetImagesOKCode is the HTTP code returned for type GetImagesOK
const GetImagesOKCode int = 200

/*GetImagesOK successful operation

swagger:response getImagesOK
*/
type GetImagesOK struct {

	/*
	  In: Body
	*/
	Payload models.GetImagesOKBody `json:"body,omitempty"`
}

// NewGetImagesOK creates GetImagesOK with default headers values
func NewGetImagesOK() *GetImagesOK {
	return &GetImagesOK{}
}

// WithPayload adds the payload to the get images o k response
func (o *GetImagesOK) WithPayload(payload models.GetImagesOKBody) *GetImagesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get images o k response
func (o *GetImagesOK) SetPayload(payload models.GetImagesOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetImagesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.GetImagesOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetImagesBadRequestCode is the HTTP code returned for type GetImagesBadRequest
const GetImagesBadRequestCode int = 400

/*GetImagesBadRequest Invalid input

swagger:response getImagesBadRequest
*/
type GetImagesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetImagesBadRequest creates GetImagesBadRequest with default headers values
func NewGetImagesBadRequest() *GetImagesBadRequest {
	return &GetImagesBadRequest{}
}

// WithPayload adds the payload to the get images bad request response
func (o *GetImagesBadRequest) WithPayload(payload *models.Error) *GetImagesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get images bad request response
func (o *GetImagesBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetImagesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetImagesDefault Generic error response

swagger:response getImagesDefault
*/
type GetImagesDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetImagesDefault creates GetImagesDefault with default headers values
func NewGetImagesDefault(code int) *GetImagesDefault {
	if code <= 0 {
		code = 500
	}

	return &GetImagesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get images default response
func (o *GetImagesDefault) WithStatusCode(code int) *GetImagesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get images default response
func (o *GetImagesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get images default response
func (o *GetImagesDefault) WithPayload(payload *models.Error) *GetImagesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get images default response
func (o *GetImagesDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetImagesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
