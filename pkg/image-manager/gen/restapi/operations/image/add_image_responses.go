///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/dispatch/pkg/image-manager/gen/models"
)

// AddImageCreatedCode is the HTTP code returned for type AddImageCreated
const AddImageCreatedCode int = 201

/*AddImageCreated created

swagger:response addImageCreated
*/
type AddImageCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Image `json:"body,omitempty"`
}

// NewAddImageCreated creates AddImageCreated with default headers values
func NewAddImageCreated() *AddImageCreated {
	return &AddImageCreated{}
}

// WithPayload adds the payload to the add image created response
func (o *AddImageCreated) WithPayload(payload *models.Image) *AddImageCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add image created response
func (o *AddImageCreated) SetPayload(payload *models.Image) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddImageCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddImageBadRequestCode is the HTTP code returned for type AddImageBadRequest
const AddImageBadRequestCode int = 400

/*AddImageBadRequest Invalid input

swagger:response addImageBadRequest
*/
type AddImageBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddImageBadRequest creates AddImageBadRequest with default headers values
func NewAddImageBadRequest() *AddImageBadRequest {
	return &AddImageBadRequest{}
}

// WithPayload adds the payload to the add image bad request response
func (o *AddImageBadRequest) WithPayload(payload *models.Error) *AddImageBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add image bad request response
func (o *AddImageBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddImageBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AddImageDefault Generic error response

swagger:response addImageDefault
*/
type AddImageDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddImageDefault creates AddImageDefault with default headers values
func NewAddImageDefault(code int) *AddImageDefault {
	if code <= 0 {
		code = 500
	}

	return &AddImageDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the add image default response
func (o *AddImageDefault) WithStatusCode(code int) *AddImageDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the add image default response
func (o *AddImageDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the add image default response
func (o *AddImageDefault) WithPayload(payload *models.Error) *AddImageDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add image default response
func (o *AddImageDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddImageDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
