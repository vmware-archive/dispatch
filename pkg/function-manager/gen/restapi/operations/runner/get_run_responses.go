///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package runner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// GetRunOKCode is the HTTP code returned for type GetRunOK
const GetRunOKCode int = 200

/*GetRunOK Function Run

swagger:response getRunOK
*/
type GetRunOK struct {

	/*
	  In: Body
	*/
	Payload *v1.Run `json:"body,omitempty"`
}

// NewGetRunOK creates GetRunOK with default headers values
func NewGetRunOK() *GetRunOK {

	return &GetRunOK{}
}

// WithPayload adds the payload to the get run o k response
func (o *GetRunOK) WithPayload(payload *v1.Run) *GetRunOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get run o k response
func (o *GetRunOK) SetPayload(payload *v1.Run) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRunOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRunBadRequestCode is the HTTP code returned for type GetRunBadRequest
const GetRunBadRequestCode int = 400

/*GetRunBadRequest Bad Request

swagger:response getRunBadRequest
*/
type GetRunBadRequest struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetRunBadRequest creates GetRunBadRequest with default headers values
func NewGetRunBadRequest() *GetRunBadRequest {

	return &GetRunBadRequest{}
}

// WithPayload adds the payload to the get run bad request response
func (o *GetRunBadRequest) WithPayload(payload *v1.Error) *GetRunBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get run bad request response
func (o *GetRunBadRequest) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRunBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRunUnauthorizedCode is the HTTP code returned for type GetRunUnauthorized
const GetRunUnauthorizedCode int = 401

/*GetRunUnauthorized Unauthorized Request

swagger:response getRunUnauthorized
*/
type GetRunUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetRunUnauthorized creates GetRunUnauthorized with default headers values
func NewGetRunUnauthorized() *GetRunUnauthorized {

	return &GetRunUnauthorized{}
}

// WithPayload adds the payload to the get run unauthorized response
func (o *GetRunUnauthorized) WithPayload(payload *v1.Error) *GetRunUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get run unauthorized response
func (o *GetRunUnauthorized) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRunUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRunForbiddenCode is the HTTP code returned for type GetRunForbidden
const GetRunForbiddenCode int = 403

/*GetRunForbidden access to this resource is forbidden

swagger:response getRunForbidden
*/
type GetRunForbidden struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetRunForbidden creates GetRunForbidden with default headers values
func NewGetRunForbidden() *GetRunForbidden {

	return &GetRunForbidden{}
}

// WithPayload adds the payload to the get run forbidden response
func (o *GetRunForbidden) WithPayload(payload *v1.Error) *GetRunForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get run forbidden response
func (o *GetRunForbidden) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRunForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRunNotFoundCode is the HTTP code returned for type GetRunNotFound
const GetRunNotFoundCode int = 404

/*GetRunNotFound Function or Run not found

swagger:response getRunNotFound
*/
type GetRunNotFound struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetRunNotFound creates GetRunNotFound with default headers values
func NewGetRunNotFound() *GetRunNotFound {

	return &GetRunNotFound{}
}

// WithPayload adds the payload to the get run not found response
func (o *GetRunNotFound) WithPayload(payload *v1.Error) *GetRunNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get run not found response
func (o *GetRunNotFound) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRunNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetRunDefault Unknown error

swagger:response getRunDefault
*/
type GetRunDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetRunDefault creates GetRunDefault with default headers values
func NewGetRunDefault(code int) *GetRunDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRunDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get run default response
func (o *GetRunDefault) WithStatusCode(code int) *GetRunDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get run default response
func (o *GetRunDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get run default response
func (o *GetRunDefault) WithPayload(payload *v1.Error) *GetRunDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get run default response
func (o *GetRunDefault) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRunDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
