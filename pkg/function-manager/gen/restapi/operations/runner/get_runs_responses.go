///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package runner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// GetRunsOKCode is the HTTP code returned for type GetRunsOK
const GetRunsOKCode int = 200

/*GetRunsOK List of function runs

swagger:response getRunsOK
*/
type GetRunsOK struct {

	/*
	  In: Body
	*/
	Payload []*v1.Run `json:"body,omitempty"`
}

// NewGetRunsOK creates GetRunsOK with default headers values
func NewGetRunsOK() *GetRunsOK {

	return &GetRunsOK{}
}

// WithPayload adds the payload to the get runs o k response
func (o *GetRunsOK) WithPayload(payload []*v1.Run) *GetRunsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get runs o k response
func (o *GetRunsOK) SetPayload(payload []*v1.Run) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRunsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*v1.Run, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetRunsBadRequestCode is the HTTP code returned for type GetRunsBadRequest
const GetRunsBadRequestCode int = 400

/*GetRunsBadRequest Invalid input

swagger:response getRunsBadRequest
*/
type GetRunsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetRunsBadRequest creates GetRunsBadRequest with default headers values
func NewGetRunsBadRequest() *GetRunsBadRequest {

	return &GetRunsBadRequest{}
}

// WithPayload adds the payload to the get runs bad request response
func (o *GetRunsBadRequest) WithPayload(payload *v1.Error) *GetRunsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get runs bad request response
func (o *GetRunsBadRequest) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRunsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRunsUnauthorizedCode is the HTTP code returned for type GetRunsUnauthorized
const GetRunsUnauthorizedCode int = 401

/*GetRunsUnauthorized Unauthorized Request

swagger:response getRunsUnauthorized
*/
type GetRunsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetRunsUnauthorized creates GetRunsUnauthorized with default headers values
func NewGetRunsUnauthorized() *GetRunsUnauthorized {

	return &GetRunsUnauthorized{}
}

// WithPayload adds the payload to the get runs unauthorized response
func (o *GetRunsUnauthorized) WithPayload(payload *v1.Error) *GetRunsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get runs unauthorized response
func (o *GetRunsUnauthorized) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRunsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRunsForbiddenCode is the HTTP code returned for type GetRunsForbidden
const GetRunsForbiddenCode int = 403

/*GetRunsForbidden access to this resource is forbidden

swagger:response getRunsForbidden
*/
type GetRunsForbidden struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetRunsForbidden creates GetRunsForbidden with default headers values
func NewGetRunsForbidden() *GetRunsForbidden {

	return &GetRunsForbidden{}
}

// WithPayload adds the payload to the get runs forbidden response
func (o *GetRunsForbidden) WithPayload(payload *v1.Error) *GetRunsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get runs forbidden response
func (o *GetRunsForbidden) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRunsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRunsNotFoundCode is the HTTP code returned for type GetRunsNotFound
const GetRunsNotFoundCode int = 404

/*GetRunsNotFound Function not found

swagger:response getRunsNotFound
*/
type GetRunsNotFound struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetRunsNotFound creates GetRunsNotFound with default headers values
func NewGetRunsNotFound() *GetRunsNotFound {

	return &GetRunsNotFound{}
}

// WithPayload adds the payload to the get runs not found response
func (o *GetRunsNotFound) WithPayload(payload *v1.Error) *GetRunsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get runs not found response
func (o *GetRunsNotFound) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRunsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetRunsDefault Unknown error

swagger:response getRunsDefault
*/
type GetRunsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetRunsDefault creates GetRunsDefault with default headers values
func NewGetRunsDefault(code int) *GetRunsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRunsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get runs default response
func (o *GetRunsDefault) WithStatusCode(code int) *GetRunsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get runs default response
func (o *GetRunsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get runs default response
func (o *GetRunsDefault) WithPayload(payload *v1.Error) *GetRunsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get runs default response
func (o *GetRunsDefault) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRunsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
