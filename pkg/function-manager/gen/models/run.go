///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Run run
// swagger:model Run

type Run struct {

	// blocking
	Blocking bool `json:"blocking,omitempty"`

	// executed time
	// Read Only: true
	ExecutedTime int64 `json:"executedTime,omitempty"`

	// finished time
	// Read Only: true
	FinishedTime int64 `json:"finishedTime,omitempty"`

	// function Id
	// Read Only: true
	FunctionID string `json:"functionId,omitempty"`

	// function name
	// Read Only: true
	FunctionName string `json:"functionName,omitempty"`

	// input
	Input interface{} `json:"input,omitempty"`

	// logs
	Logs []string `json:"logs"`

	// name
	// Read Only: true
	Name strfmt.UUID `json:"name,omitempty"`

	// output
	// Read Only: true
	Output interface{} `json:"output,omitempty"`

	// reason
	Reason []string `json:"reason"`

	// secrets
	Secrets []string `json:"secrets"`

	// status
	Status Status `json:"status,omitempty"`

	// tags
	Tags RunTags `json:"tags"`
}

/* polymorph Run blocking false */

/* polymorph Run executedTime false */

/* polymorph Run finishedTime false */

/* polymorph Run functionId false */

/* polymorph Run functionName false */

/* polymorph Run input false */

/* polymorph Run logs false */

/* polymorph Run name false */

/* polymorph Run output false */

/* polymorph Run reason false */

/* polymorph Run secrets false */

/* polymorph Run status false */

/* polymorph Run tags false */

// Validate validates this run
func (m *Run) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSecrets(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Run) validateLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.Logs) { // not required
		return nil
	}

	return nil
}

func (m *Run) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	return nil
}

func (m *Run) validateSecrets(formats strfmt.Registry) error {

	if swag.IsZero(m.Secrets) { // not required
		return nil
	}

	return nil
}

func (m *Run) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Run) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Run) UnmarshalBinary(b []byte) error {
	var res Run
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
