///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// State state
// swagger:model State

type State string

const (
	// StateINITIALIZED captures enum value "INITIALIZED"
	StateINITIALIZED State = "INITIALIZED"
	// StateCREATING captures enum value "CREATING"
	StateCREATING State = "CREATING"
	// StateREADY captures enum value "READY"
	StateREADY State = "READY"
	// StateERROR captures enum value "ERROR"
	StateERROR State = "ERROR"
	// StateDELETED captures enum value "DELETED"
	StateDELETED State = "DELETED"
)

// for schema
var stateEnum []interface{}

func init() {
	var res []State
	if err := json.Unmarshal([]byte(`["INITIALIZED","CREATING","READY","ERROR","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stateEnum = append(stateEnum, v)
	}
}

func (m State) validateStateEnum(path, location string, value State) error {
	if err := validate.Enum(path, location, value, stateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this state
func (m State) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
