///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package runner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRunsParams creates a new GetRunsParams object
// with the default values initialized.
func NewGetRunsParams() *GetRunsParams {
	var (
		xDispatchOrgDefault     = string("default")
		xDispatchProjectDefault = string("default")
	)
	return &GetRunsParams{
		XDispatchOrg:     &xDispatchOrgDefault,
		XDispatchProject: &xDispatchProjectDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRunsParamsWithTimeout creates a new GetRunsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRunsParamsWithTimeout(timeout time.Duration) *GetRunsParams {
	var (
		xDispatchOrgDefault     = string("default")
		xDispatchProjectDefault = string("default")
	)
	return &GetRunsParams{
		XDispatchOrg:     &xDispatchOrgDefault,
		XDispatchProject: &xDispatchProjectDefault,

		timeout: timeout,
	}
}

// NewGetRunsParamsWithContext creates a new GetRunsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRunsParamsWithContext(ctx context.Context) *GetRunsParams {
	var (
		xDispatchOrgDefault     = string("default")
		xDispatchProjectDefault = string("default")
	)
	return &GetRunsParams{
		XDispatchOrg:     &xDispatchOrgDefault,
		XDispatchProject: &xDispatchProjectDefault,

		Context: ctx,
	}
}

// NewGetRunsParamsWithHTTPClient creates a new GetRunsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRunsParamsWithHTTPClient(client *http.Client) *GetRunsParams {
	var (
		xDispatchOrgDefault     = string("default")
		xDispatchProjectDefault = string("default")
	)
	return &GetRunsParams{
		XDispatchOrg:     &xDispatchOrgDefault,
		XDispatchProject: &xDispatchProjectDefault,
		HTTPClient:       client,
	}
}

/*GetRunsParams contains all the parameters to send to the API endpoint
for the get runs operation typically these are written to a http.Request
*/
type GetRunsParams struct {

	/*XDispatchOrg*/
	XDispatchOrg *string
	/*XDispatchProject*/
	XDispatchProject *string
	/*FunctionName
	  Name of function to run or retreive runs for

	*/
	FunctionName *string
	/*Since
	  Retreive runs modified since given Unix time

	*/
	Since *int64
	/*Tags
	  Filter based on tags

	*/
	Tags []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get runs params
func (o *GetRunsParams) WithTimeout(timeout time.Duration) *GetRunsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get runs params
func (o *GetRunsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get runs params
func (o *GetRunsParams) WithContext(ctx context.Context) *GetRunsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get runs params
func (o *GetRunsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get runs params
func (o *GetRunsParams) WithHTTPClient(client *http.Client) *GetRunsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get runs params
func (o *GetRunsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXDispatchOrg adds the xDispatchOrg to the get runs params
func (o *GetRunsParams) WithXDispatchOrg(xDispatchOrg *string) *GetRunsParams {
	o.SetXDispatchOrg(xDispatchOrg)
	return o
}

// SetXDispatchOrg adds the xDispatchOrg to the get runs params
func (o *GetRunsParams) SetXDispatchOrg(xDispatchOrg *string) {
	o.XDispatchOrg = xDispatchOrg
}

// WithXDispatchProject adds the xDispatchProject to the get runs params
func (o *GetRunsParams) WithXDispatchProject(xDispatchProject *string) *GetRunsParams {
	o.SetXDispatchProject(xDispatchProject)
	return o
}

// SetXDispatchProject adds the xDispatchProject to the get runs params
func (o *GetRunsParams) SetXDispatchProject(xDispatchProject *string) {
	o.XDispatchProject = xDispatchProject
}

// WithFunctionName adds the functionName to the get runs params
func (o *GetRunsParams) WithFunctionName(functionName *string) *GetRunsParams {
	o.SetFunctionName(functionName)
	return o
}

// SetFunctionName adds the functionName to the get runs params
func (o *GetRunsParams) SetFunctionName(functionName *string) {
	o.FunctionName = functionName
}

// WithSince adds the since to the get runs params
func (o *GetRunsParams) WithSince(since *int64) *GetRunsParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the get runs params
func (o *GetRunsParams) SetSince(since *int64) {
	o.Since = since
}

// WithTags adds the tags to the get runs params
func (o *GetRunsParams) WithTags(tags []string) *GetRunsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get runs params
func (o *GetRunsParams) SetTags(tags []string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *GetRunsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XDispatchOrg != nil {

		// header param X-Dispatch-Org
		if err := r.SetHeaderParam("X-Dispatch-Org", *o.XDispatchOrg); err != nil {
			return err
		}

	}

	if o.XDispatchProject != nil {

		// header param X-Dispatch-Project
		if err := r.SetHeaderParam("X-Dispatch-Project", *o.XDispatchProject); err != nil {
			return err
		}

	}

	if o.FunctionName != nil {

		// query param functionName
		var qrFunctionName string
		if o.FunctionName != nil {
			qrFunctionName = *o.FunctionName
		}
		qFunctionName := qrFunctionName
		if qFunctionName != "" {
			if err := r.SetQueryParam("functionName", qFunctionName); err != nil {
				return err
			}
		}

	}

	if o.Since != nil {

		// query param since
		var qrSince int64
		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := swag.FormatInt64(qrSince)
		if qSince != "" {
			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}

	}

	valuesTags := o.Tags

	joinedTags := swag.JoinByFormat(valuesTags, "multi")
	// query array param tags
	if err := r.SetQueryParam("tags", joinedTags...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
