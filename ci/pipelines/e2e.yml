---
resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: jtarchie/pr

- name: keyval
  type: docker-image
  source:
    repository: swce/keyval-resource

resources:
- name: dispatch-pr
  type: pull-request
  source:
    repo: vmware/dispatch
    uri: git@github.com:vmware/dispatch.git
    access_token: ((github-access-token))
    private_key: ((github-private-key))
    label: run-e2e
    every: true

- name: logs-bucket
  type: s3
  source:
    bucket: ((s3-logs-bucket-name))
    private: true
    regexp: e2e-tests/(.*).tar.gz
    region_name: ((s3-logs-bucket-region-name))
    access_key_id: ((s3-logs-bucket-access-key))
    secret_access_key: ((s3-logs-bucket-secret-key))

- name: keyval
  type: keyval

- name: api-manager-image
  type: docker-image
  source:
    username: ((ci-registry-username.gcr))
    password: ((ci-registry-password.gcr))
    repository: ((ci-registry-org.gcr))/dispatch-api-manager

- name: event-driver-image
  type: docker-image
  source:
    username: ((ci-registry-username.gcr))
    password: ((ci-registry-password.gcr))
    repository: ((ci-registry-org.gcr))/dispatch-event-driver

- name: event-manager-image
  type: docker-image
  source:
    username: ((ci-registry-username.gcr))
    password: ((ci-registry-password.gcr))
    repository: ((ci-registry-org.gcr))/dispatch-event-manager

- name: function-manager-image
  type: docker-image
  source:
    username: ((ci-registry-username.gcr))
    password: ((ci-registry-password.gcr))
    repository: ((ci-registry-org.gcr))/dispatch-function-manager

- name: identity-manager-image
  type: docker-image
  source:
    username: ((ci-registry-username.gcr))
    password: ((ci-registry-password.gcr))
    repository: ((ci-registry-org.gcr))/dispatch-identity-manager

- name: image-manager-image
  type: docker-image
  source:
    username: ((ci-registry-username.gcr))
    password: ((ci-registry-password.gcr))
    repository: ((ci-registry-org.gcr))/dispatch-image-manager

- name: secret-store-image
  type: docker-image
  source:
    username: ((ci-registry-username.gcr))
    password: ((ci-registry-password.gcr))
    repository: ((ci-registry-org.gcr))/dispatch-secret-store

- name: application-manager-image
  type: docker-image
  source:
    username: ((ci-registry-username.gcr))
    password: ((ci-registry-password.gcr))
    repository: ((ci-registry-org.gcr))/dispatch-application-manager

- name: service-manager-image
  type: docker-image
  source:
    username: ((ci-registry-username.gcr))
    password: ((ci-registry-password.gcr))
    repository: ((ci-registry-org.gcr))/dispatch-service-manager

jobs:
- name: build-images
  public: true
  on_failure:
    put: dispatch-pr
    params: {path: dispatch, context: dispatch-e2e-images, status: failure}
  plan:
  - get: dispatch
    resource: dispatch-pr
    trigger: true
    version: every
  - put: dispatch-pr
    params: {path: dispatch, context: dispatch-e2e-images, status: pending}
    get_params: {fetch_merge: true}
  - task: build-binaries
    file: dispatch/ci/e2e/binaries.yml
  - task: prepare-images
    file: dispatch/ci/e2e/prepare-images.yml
  - put: keyval
    params:
      file: build-context/keyval.properties
  - aggregate:
    - put: api-manager-image
      params:
        build: build-context/api-manager
        dockerfile: build-context/api-manager/Dockerfile
        tag: build-context/tag
    - put: event-driver-image
      params:
        build: build-context/event-driver
        dockerfile: build-context/event-driver/Dockerfile
        tag: build-context/tag
    - put: event-manager-image
      params:
        build: build-context/event-manager
        dockerfile: build-context/event-manager/Dockerfile
        tag: build-context/tag
    - put: function-manager-image
      params:
        build: build-context/function-manager
        dockerfile: build-context/function-manager/Dockerfile
        tag: build-context/tag
    - put: identity-manager-image
      params:
        build: build-context/identity-manager
        dockerfile: build-context/identity-manager/Dockerfile
        tag: build-context/tag
    - put: image-manager-image
      params:
        build: build-context/image-manager
        dockerfile: build-context/image-manager/Dockerfile
        tag: build-context/tag
    - put: secret-store-image
      params:
        build: build-context/secret-store
        dockerfile: build-context/secret-store/Dockerfile
        tag: build-context/tag
    - put: application-manager-image
      params:
        build: build-context/application-manager
        dockerfile: build-context/application-manager/Dockerfile
        tag: build-context/tag
    - put: service-manager-image
      params:
        build: build-context/service-manager
        dockerfile: build-context/service-manager/Dockerfile
        tag: build-context/tag
  - put: dispatch-pr
    params: {path: dispatch, context: dispatch-e2e-images, status: success}

- name: tests-openfaas
  public: true
  plan:
  - aggregate:
    - get: dispatch
      passed: [build-images]
      resource: dispatch-pr
      trigger: true
      version: every
    - get: keyval
      passed: [build-images]
  - put: dispatch-pr
    params: {path: dispatch, context: dispatch-e2e-openfaas, status: pending}
  - task: build-cli
    file: dispatch/ci/e2e/build-cli.yml
  - task: create-gke-cluster
    file: dispatch/ci/e2e/gke-cluster-create.yml
    params:
      GKE_KEY: ((gke-key))
      GKE_PROJECT_ID: ((gke-project-id))
  - task: deploy-dispatch
    file: dispatch/ci/e2e/deploy-dispatch.yml
    input_mapping:
      cluster: k8s-cluster
      properties: keyval
    params:
      GKE_KEY: ((gke-key))
      GKE_PROJECT_ID: ((gke-project-id))
      DOCKER_REGISTRY_HOST: ((ci-registry-org.gcr))
      FAAS: openfaas
  - task: e2e-tests
    file: dispatch/ci/e2e/run-tests.yml
    input_mapping:
      cluster: k8s-cluster
    params:
      GKE_KEY: ((gke-key))
      GKE_PROJECT_ID: ((gke-project-id))
      FAAS: openfaas
  - task: uninstall-dispatch
    file: dispatch/ci/e2e/uninstall-dispatch.yml
    input_mapping:
      cluster: k8s-cluster
      properties: keyval
    params:
      GKE_KEY: ((gke-key))
      GKE_PROJECT_ID: ((gke-project-id))
  on_success:
    put: dispatch-pr
    params: {path: dispatch, context: dispatch-e2e-openfaas, status: success}
  on_failure:
    do:
    - put: dispatch-pr
      params: {path: dispatch, context: dispatch-e2e-openfaas, status: failure}
    - do: *test_on_failure
  ensure: *test_ensure

- name: tests-riff
  public: true
  plan:
  - aggregate:
    - get: dispatch
      passed: [build-images]
      resource: dispatch-pr
      trigger: true
      version: every
    - get: keyval
      passed: [build-images]
  - put: dispatch-pr
    params: {path: dispatch, context: dispatch-e2e-riff, status: pending}
  - task: build-cli
    file: dispatch/ci/e2e/build-cli.yml
  - task: create-gke-cluster
    file: dispatch/ci/e2e/gke-cluster-create.yml
    params:
      GKE_KEY: ((gke-key))
      GKE_PROJECT_ID: ((gke-project-id))
  - task: deploy-dispatch
    file: dispatch/ci/e2e/deploy-dispatch.yml
    input_mapping:
      cluster: k8s-cluster
      properties: keyval
    params:
      GKE_KEY: ((gke-key))
      GKE_PROJECT_ID: ((gke-project-id))
      DOCKER_REGISTRY_HOST: ((ci-registry-org.gcr))
      FAAS: riff
  - task: e2e-tests
    file: dispatch/ci/e2e/run-tests.yml
    input_mapping:
      cluster: k8s-cluster
    params:
      GKE_KEY: ((gke-key))
      GKE_PROJECT_ID: ((gke-project-id))
      FAAS: riff
  - task: uninstall-dispatch
    file: dispatch/ci/e2e/uninstall-dispatch.yml
    input_mapping:
      cluster: k8s-cluster
      properties: keyval
    params:
      GKE_KEY: ((gke-key))
      GKE_PROJECT_ID: ((gke-project-id))
  on_success:
    put: dispatch-pr
    params: {path: dispatch, context: dispatch-e2e-riff, status: success}
  on_failure:
    do:
    - put: dispatch-pr
      params: {path: dispatch, context: dispatch-e2e-riff, status: failure}
    - do: *test_on_failure
  ensure: *test_ensure

templates:
  on_failure: &test_on_failure
  - task: Collect logs
    file: dispatch/ci/e2e/collect-logs.yml
    input_mapping:
      cluster: k8s-cluster
      properties: keyval
    params:
      GKE_KEY: ((gke-key))
      GKE_PROJECT_ID: ((gke-project-id))
  - put: logs-bucket
    params:
      file: dispatch-logs/*.tar.gz
  - task: uninstall-dispatch
    file: dispatch/ci/e2e/uninstall-dispatch.yml
    input_mapping:
      cluster: k8s-cluster
      properties: keyval
    params:
      GKE_KEY: ((gke-key))
      GKE_PROJECT_ID: ((gke-project-id))
  test_ensure: &test_ensure
    do:
    - task: Cleanup cluster
      file: dispatch/ci/e2e/cleanup.yml
      input_mapping:
        cluster: k8s-cluster
        properties: keyval
      params:
        GKE_KEY: ((gke-key))
        GKE_PROJECT_ID: ((gke-project-id))
