---
platform: linux

image_resource:
  type: docker-image
  source:
    repository: vmware/dispatch-k8s-ci
    tag: v0.0.8

params:
  GKE_KEY:
  GKE_PROJECT_ID:
  DOCKER_REGISTRY_HOST:
  FAAS: openfaas
  EVENT_TRANSPORT: kafka

# dispatch must be dispatch git repo.
# dispatch-cli must contain "dispatch" binary
inputs:
- name: dispatch
- name: cluster
- name: properties
- name: dispatch-cli

outputs:
- name: ci-keys

run:
  path: /bin/bash
  args:
  - -c
  - |
    set -e -x -u
    source dispatch/ci/e2e/config-k8s-env.sh
    cp dispatch-cli/dispatch /usr/local/bin/dispatch

    if [[ -e properties/keyval.properties ]]; then
        export IMAGE_TAG=$(cat properties/keyval.properties | grep "tag" | cut -d'=' -f2)
    fi

    set +x
    if [[ -n ${GKE_PROJECT_ID} ]]; then
        cp dispatch/ci/e2e/configs/dispatch-install-gke.yml install.yaml
    else
        cp dispatch/ci/e2e/configs/dispatch-install-local.yml install.yaml
    fi
    set -x

    sed -i "s/IMAGE_TAG/${IMAGE_TAG}/g" install.yaml
    sed -i "s#DOCKER_REGISTRY_HOST#${DOCKER_REGISTRY_HOST}#g" install.yaml
    sed -i "s/FAAS/${FAAS}/g" install.yaml
    sed -i "s/EVENT_TRANSPORT/${EVENT_TRANSPORT}/g" install.yaml

    cp dispatch-cli/dispatch /usr/local/bin/dispatch

    # workaround for issue https://github.com/kubernetes/helm/issues/2998
    cp -r dispatch/charts charts

    # Generate required keys for bootstrap mode
    openssl genrsa -out ci-keys/ci-bootstrap.key 4096
    openssl rsa -in ci-keys/ci-bootstrap.key -pubout -outform PEM -out ci-keys/ci-bootstrap.key.pub
    export BOOTSTRAP_PUBLIC_KEY=`base64 -w 0 -i ci-keys/ci-bootstrap.key.pub`
    sed -i "s#BOOTSTRAP_PUBLIC_KEY#${BOOTSTRAP_PUBLIC_KEY}#g" install.yaml

    # Installs Dispatch in bootstrap mode
    dispatch install --file install.yaml --charts-dir charts


    # Setup Dispatch Config
    mkdir -p ~/.dispatch
    if [[ -n ${GKE_PROJECT_ID} ]]; then
        export LOADBALANCER_IP=$(kubectl get svc/ingress-nginx-ingress-controller -n kube-system -o json | jq -r '.status.loadBalancer.ingress[0].ip')
        cp dispatch/ci/e2e/configs/dispatch-config-gke.json ~/.dispatch/config.json
        sed -i "s/LOADBALANCER_IP/$LOADBALANCER_IP/g" ~/.dispatch/config.json
        sed -i "s/CURRENT_CONTEXT/$(echo $LOADBALANCER_IP | tr '.' '-')/g" ~/.dispatch/config.json
    else
        export INGRESS_PORT=$(kubectl get svc/ingress-nginx-ingress-controller -n kube-system -o json | jq -r '.spec.ports[1].nodePort')
        export NODE_IP=$(cat cluster/metadata | jq -r '.nodeIP')
        echo "${NODE_IP} dispatch.local dev.dispatch.local" >> /etc/hosts
        cp dispatch/ci/e2e/configs/dispatch-config-local.json ~/.dispatch/config.json
        sed -i "s/INGRESS_PORT/$INGRESS_PORT/g" ~/.dispatch/config.json
    fi

    # Generate required keys for ci-user
    openssl genrsa -out ci-keys/ci-user.key 4096
    openssl rsa -in ci-keys/ci-user.key -pubout -outform PEM -out ci-keys/ci-user.key.pub

    # Create ci-user service account for e2e tests
    svcCmd="dispatch iam create serviceaccount \
      ci-user \
      --public-key ci-keys/ci-user.key.pub \
      --service-account ci-bootstrap-user \
      --jwt-private-key ci-keys/ci-bootstrap.key"

    # Temporary workaround until we get to the bottom of the intermittent CI failure with the prev command
    n=5; until $svcCmd; do if [ $n -gt 0 ] ; then echo "Failed - Retrying attempt $((6-n))"; sleep 5; ((n--)); else break; fi; done

    # Create admin policy for the service account
    dispatch iam create policy \
      ci-user-admin-policy \
      --subject ci-user --action "*" --resource "*" \
      --service-account ci-bootstrap-user \
      --jwt-private-key ci-keys/ci-bootstrap.key

    # Disable the bootstrap mode
    dispatch manage --disable-bootstrap-mode

    # Wait for the bootstrap mode to be disabled
    sleep 30