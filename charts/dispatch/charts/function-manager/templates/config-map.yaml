apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}
  namespace: {{ .Release.Namespace }}
data:
  organization: {{ .Values.global.organization }}
  # TODO(imikushin): just use YAML
  config.json: |-
    {
      "organizationID": "{{ .Values.global.organization }}",
      "function": {
        "faas": "{{ .Values.faas.selected }}",
        "resyncPeriod": {{ .Values.resyncPeriod }},
        "openwhisk": {
          "host": "{{ .Values.faas.openwhisk.host }}"
        },
        "openfaas": {
          "gateway": "{{ .Values.faas.openfaas.gateway }}",
          "funcNamespace": "{{ .Values.faas.openfaas.namespace }}",
          "funcDefaultLimits": {{ toJson .Values.faas.openfaas.funcDefaultLimits }},
          "funcDefaultRequests": {{ toJson .Values.faas.openfaas.funcDefaultRequests }}
        },
        "riff": {
          "kafkaBrokers": ["{{ join ", " .Values.faas.riff.kafkaBrokers }}"],
          "funcNamespace": "{{ .Values.faas.riff.namespace }}",
          "funcDefaultLimits": {{ toJson .Values.faas.riff.funcDefaultLimits }},
          "funcDefaultRequests": {{ toJson .Values.faas.riff.funcDefaultRequests }}
        }
      },
      "registry": {
        "uri": "{{ default .Values.global.registry.uri .Values.registry.uri }}",
        "auth": "{{ default .Values.global.registry.auth .Values.registry.auth }}"
      }
    }
